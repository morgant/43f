#!/usr/bin/env bash

# 
# 43f - A simple date-based storage management utility based on the forty-three 
#        folders concept from David Allen's "Getting Things Done" program. It
#        maintains 43 folders per year (one for every month [12] and one for 
#        every possible date in a month [31], therefore allowing you to store 
#        up to 31 daily file sets, 12 monthly file sets, and as many annual 
#        file sets as you would like. It is ideal for managing backup/snapshot
#        sets, but should be flexible enough for any number of uses.
# 
# CHANGE LOG:
# 
# v0.1   - 2009-03-07 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial development.
# v0.1.1 - 2013-06-17 - Morgan Aldridge
#                       Added optional year parameter to `init` command. Fixed 
#                       bug causing old files to be moved to incorrect month 
#                       folder on the 1st day of a month. Files outside the 
#                       number of months to keep are now rolled properly. Fix
#                       in launchd.plist. Linux support.
# v0.1.2 - 2013-08-08 - Morgan Aldridge
#                       Fixed bug causing fatal error when moving files to
#                       month folder when destination month was >= 8.
# v0.1.3 - 2013-10-09 - Morgan Aldridge
#                       Fixed bug causing file consolidation to fail for files
#                       in an October month folder. Fixed possible issues moving
#                       daily files to month folder when day was >= 8.
# v0.1.4 - 2013-10-29 - Morgan Aldridge
#                       Fixed disk usage statistics calculation bugs.
# v0.1.5 - 2014-01-09 - Morgan Aldridge
#                       Automatically create new year directory on 1st of year.
# v0.1.6 - 2014-01-16 - Morgan Aldridge
#                       Fixed bug causing daily files to moved to month folders
#                       in current year instead of previous year when crossing
#                       year boundary within past 31 days. Fixed bug preventing
#                       files from being consolidated in monthly folders from
#                       previous years.
# v0.1.7 - 2014-01-22 - Morgan Aldridge
#                       Fixed bug in Linux date parsing which failed for the 
#                       month of October, causing issues similar to those fixed
#                       in v0.1.3.
# v0.1.8 - 2015-01-02 - Morgan Aldridge
#                       Fixed bug causing convenience symlinks to not correctly
#                       link to previous year directories during the first week
#                       of January.
# v0.1.9 - 2019-11-16 - Morgan Aldridge
#                       Cross platform compatiblity improvements, esp. for
#                       OpenBSD.
# v0.1.10- 2019-11-20 - Morgan Aldridge
#                       Fix for OpenBSD compatibility when consolidating files.
# v0.2   - 2020-04-16 - Morgan Aldridge
#                       Don't create repository symlinks in dry-run mode or if
#                       repo isn't initialized. Fix zero date offset calculations
#                       on OpenBSD. Support long TLDs in `notify` lines in config
#                       file. Improved functions input validation. Fix too few
#                       days' data kept if previous month's length is less than
#                       days to keep.
# v0.2.1 - 2020-04-18 - Morgan Aldridge
#                       Fixed bug causing monthly archives to be incorrectly moved
#                       to current month directory.
# v0.2.2 - 2020-04-19 - Fixed errors in stats command.
# v0.2.  - 2020-05-   - Fixed potential function input validation issue. Minor
#                       refactor of verbose output.
# 
# LICENSE:
# 
# Copyright (c) 2009-2020, Morgan Aldridge. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

# info
tool=$(basename "$0")
version='0.2.2'
copyright='Copyright (c) 2009-2020 Morgan Aldridge'

# global variables
verbose=false
dry_run=false
notifications=true
config_file='/usr/local/etc/43f.conf'
config_repository='/usr/local/var/db/43f'
config_notify_email='root'
config_keep_days=31
config_keep_months=12
config_keep_years=10
config_date_format="%Y-%m-%d-%H%M"

y=`date "+%Y"`
m=`date "+%m"`
d=`date "+%d"`

# print usage instructions (help)
function usage() {
echo "Usage: $tool [-h|-t|-V] [-v] [-c file] COMMAND

Options:
  -v                   : verbose output
  -V, --version        : print the version number and exit
  -h, --help           : print these usage instructions and exit
  -c, --config=file    : specify an alternate config file
                DEFAULT: /usr/local/etc/43f.conf
  -t                   : check the config file and exit
  -n, --dry-run        : don't actually move/delete any files
  -N, --no-notify      : disable email notifications

Commands:
  init <path> [<year>] : initialize specified repository
  run                  : perform storage management
  stats                : print repository stats

Config File Options:
  repository           : absolute path to archive repository
                DEFAULT: /usr/local/var/db/43f
  notify               : email address(es) to send notifications to
                DEFAULT: root
  days                 : number of daily file sets to preserve (1-31)
                DEFAULT: 31
  months               : number of monthly file sets to preserve (1-12)
                DEFAULT: 12
  years                : number of annual file sets to preserve (1+)
                DEFAULT: 10"
}						  

# print version info
function version() {
	echo "$tool v$version $copyright"
}

# inlcude functions from lib43f
source ./lib43f

# notify of errors/warnings via email
function notify() {
	local repo="$1"
	local type="$2"
	local message="$3"
	local time="$(date +"%Y-%m-%d %H:%M:%S")"
	
	if $notifications; then
		mail -s "${tool}: ${type} in repository '${repo}' at ${time}" "$config_notify_email" <<-EOM
			$type in $tool repository '${repo}':
			
			$message
			
			$tool $version @ $time
		EOM
	fi
}

# convert kilobytes to human readable
function kb_to_hr() {
	local success=true
	local kb="$1"
	
	# is this a whole number?
	if [[ "$kb" =~ ^[0-9]+$ ]]; then
		# terabytes?
		if [ "$kb" -ge 1073741824 ]; then
			printf "%.0fTB" $(( $kb / 1073741824 ))
		# gigabytes?
		elif [ "$kb" -ge 1049000 ]; then
			printf "%.0fGB" $(( $kb / 1049000 ))
		# megabytes?
		elif [ "$kb" -ge 1024 ]; then
			printf "%.0fMB" $(( $kb / 1024 ))
		else
			printf "%.0fKB" $kb
		fi
	else
		success=false
	fi
	
	$success
}

# calculate file/directory disk usage in kilobytes
function du_kb() {
	local usage=$(du -ks "$1" | cut -f 1)
	if [ $? -eq 0 ]; then
		printf "%.0f" "$usage"
		true
	else
		false
	fi
}

# calculate file/directory available disk space in kilobytes
function df_kb() {
	local free=$(df -k "$1" | tail -n 1 | awk '{ print $4 }')
	if [ $? -eq 0 ]; then
		printf "%.0f" "$free"
		true
	else
		false
	fi
}

# get a list of disk space usages for daily directories
function get_daily_usages() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		# calculate today & keep-through dates
		local today="$d"
		local keep_through="$(relative_to_now -$(( config_keep_days - 1 ))d +%d)"
		
		# step through the subdirectories and calculate usage for those that are inside the range to preserve (starting with today)
		local year="$y"
		local month="$m"
		local day="$d"
		local day_dir=''
		while true; do
			# build the directory path
			printf -v day_dir "%s/%d/d%02d" "$repo" "$year" $(( 10#$day ))
			
			# are we keeping a range that doesn't wrap (i.e. today is greater than the day through which we're keeping)?
			# or, are we keeping a range that wraps (i.e. the day through which we're keeping is greater than today)?
			if (( ( ( 10#$today >= 10#$keep_through ) && ( 10#$day >= 10#$keep_through ) && ( 10#$day <= 10#$today ) ) || ( ( 10#$today <= 10#$keep_through ) && ( ( 10#$day <= 10#$today ) || ( 10#$day >= 10#$keep_through ) ) ) )); then
				# calculate the usage, add to total, increment the counter
				local usage=$(du_kb "$day_dir")
				if [ $? -eq 0 ]; then
					printf "%.0f" "$usage"
				else
					success=false
				fi
			fi
			
			# decrement the day & wrap around day, month, and year if we've gone under
			day=$(( 10#$day - 1 ))
			if (( 10#$day < 1 )); then
				day=31
				month=$(( 10#$month - 1 ))
				if (( 10#$month < 1 )); then
					month=12
					(( year-- ))
				fi
			fi
			
			# if we've gone all the way back around to today, break out of the loop
			if (( 10#$day == 10#$today )); then
				break;
			else
				printf "\n"
			fi
		done
	else	
		success=false
	fi
	
	$success
}

# get a list of disk space usages for monthly directories
function get_monthly_usages() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		# calculate this month & keep through months
		local this_month="$m"
		local keep_through="$(relative_to_now -$(( $config_keep_months - 1 ))mo +%m)"
		
		# step through the subdirectories and calculate usage for those that are inside the range to preserve (starting with this month)
		local year="$y"
		local month="$m"
		local month_dir=''
		while true; do
			# build the directory path
			printf -v month_dir "%s/%d/m%02d" "$repo" "$year" "$(( 10#$month ))"
			
			# are we keeping a range that doesn't wrap (i.e. this month is greater than the month through which we're keeping)?
			# or, are we keeping a range that wraps (i.e. the month through which we're keeping is greater than this month)?
			if (( ( (10#$this_month >= 10#$keep_through) \
				    && (10#$month >= 10#$keep_through) \
				    && (10#$month <= 10#$this_month) ) \
				  || ( (10#$this_month <= 10#$keep_through) \
					   && ( (10#$month <= 10#$this_month) \
						    || (10#$month >= 10#$keep_through))))); then
				# calculate the usage, add to total, increment the counter
				local usage=$(du_kb "$month_dir")
				if [ $? -eq 0 ]; then
					printf "%.0f" "$usage"
				else
					success=false
				fi
			fi
			
			# decrement the month & wrap around month and year if we've gone under
			month=$(( 10#$month - 1))
			if (( 10#$month < 1 )); then
				month=12
				(( year-- ))
			fi
			
			# if we've gone all the way back around to this month, break out of the loop
			if (( 10#$month == 10#$this_month )); then
				break;
			else
				printf "\n"
			fi
		done
	else
		success=false
	fi
	
	$success
}

# get a list of disk space usages for annual directories
function get_annual_usages() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		# calculate this year & keep through years
		local this_year="$y"
		local keep_through="$(relative_to_now -$(( $config_keep_years - 1 ))y +%Y)"
		
		# step through the subdirectories and calculate usage
		local year="$y"
		local year_dir=''
		while (( year >= keep_through )); do
			# build the directory path
			printf -v year_dir "%s/%d" "$repo" "$year"
			
			# calculate the usage (if the year directory exists)
			if [ -d "$year_dir" ]; then
				local usage=$(du_kb "$year_dir")
				if [ $? -eq 0 ]; then
					printf "%.0f\n" "$usage"
				else
					success=false
				fi
			#else
			#	printf "\n"
			fi
			
			# decrement the year
			(( year-- ))
		done
	else
		success=false
	fi
	
	$success
}

# calculate the average (mean) daily disk usage for a repository
function calculate_repository_mean_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local total_usage=0
	local n=0 
	
	if does_repository_exist "$repo"; then
		local usages="$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		else
			local usage=0
			while IFS= read -r usage; do
				if [ -n "$usage" ]; then
					(( total_usage += usage ))
					(( n++ ))
				fi
			done <<< "$usages"
		fi
	fi
	
	# output the average
	if $success; then
		[ $n -gt 0 ] && printf "%.0f" $(( total_usage/n )) || echo -n 0
	fi
	
	$success
}

# calculate the minimum daily disk usage for a repository
function calculate_repository_min_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local min_usage=''
	
	if does_repository_exist "$repo"; then
		local usages="$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		else
		local usage=0
			while IFS= read -r usage; do
				if [ -n "$usage" ]; then
					if [ -z "$min_usage" ]; then
						min_usage="$usage"
					elif (( usage < min_usage )); then
						min_usage="$usage"
					fi
				fi
			done <<< "$usages"
		fi
	fi
	
	# output the minimum
	if $success; then
		printf "%.0f" "$min_usage"
	fi
	
	$success
}

# calculate the median daily disk usage for a repository
function calculate_repository_median_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local usages_list=()
	
	if does_repository_exist "$repo"; then
		local usages="$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		else
			local usage=0
			while IFS= read -r usage; do
				if [ -n "$usage" ]; then
					usages_list+=("$usage")
				fi
			done <<< "$usages"
		fi
	fi
	
	# output the median
	if $success; then
		local median=$(( ${#usages_list[@]} / 2 ))
		IFS=$'\n' usages_list=($(sort -n <<<"${usages_list[*]}"))
		median_usage="${usages_list[$median]}"
		printf "%.0f" "$median_usage"
	fi
	
	$success
}

# calculate the maximum daily disk usage for a repository
function calculate_repository_max_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local max_usage=''
	
	if does_repository_exist "$repo"; then
		usages="$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		else
			local usage=0
			while IFS= read -r usage; do
				if [ -n "$usage" ]; then
					if [ -z "$max_usage" ]; then
						max_usage="$usage"
					elif (( $usage > $max_usage )); then
						max_usage="$usage"
					fi
				fi
			done <<< "$usages"
		fi
	fi
	
	# output the maximum
	if $success; then
		printf "%.0f" "$max_usage"
	fi
	
	$success
}

# print out repository stats
function print_repository_stats() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		local disk_usage
		local disk_free
		local min_daily_usage
		local min_monthly_usage
		local min_annual_usage
		local median_daily_usage
		local median_monthly_usage
		local median_annual_usage
		local max_daily_usage
		local max_monthly_usage
		local max_annual_usage
		local mean_daily_usage
		local mean_monthly_usage
		local mean_annual_usage
		
		# calculate disk usage for the repository
		disk_usage=$(kb_to_hr $(du_kb "$repo"))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate available disk space
		disk_free=$(kb_to_hr $(df_kb "$repo"))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating disk space available to the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating disk space available to the repository '$repo'!"
			success=false
		fi
		
		# calculate minimum daily disk usage
		min_daily_usage=$(kb_to_hr $(calculate_repository_min_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating minimum daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating minimum daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate median daily disk usage
		median_daily_usage=$(kb_to_hr $(calculate_repository_median_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating median daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating median daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate maximum daily disk usage
		max_daily_usage=$(kb_to_hr $(calculate_repository_max_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating maximum daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating maximum daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate average (mean) daily disk usage
		mean_daily_usage=$(kb_to_hr $(calculate_repository_mean_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating average daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating average daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate minimum monthly disk usage
		min_monthly_usage=$(kb_to_hr $(calculate_repository_min_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating minimum monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating minimum monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate median monthly disk usage
		median_monthly_usage=$(kb_to_hr $(calculate_repository_median_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating median monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating median monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate maximum monthly disk usage
		max_monthly_usage=$(kb_to_hr $(calculate_repository_max_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating maximum monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating maximum monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate average monthly disk usage
		mean_monthly_usage=$(kb_to_hr $(calculate_repository_mean_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating average monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating average monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate minimum annual disk usage
		min_annual_usage=$(kb_to_hr $(calculate_repository_min_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating minimum annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating minimum annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate median annual disk usage
		median_annual_usage=$(kb_to_hr $(calculate_repository_median_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating median annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating median annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate maximum annual disk us
		max_annual_usage=$(kb_to_hr $(calculate_repository_max_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating maximum annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating maximum annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate average annual disk usage
		mean_annual_usage=$(kb_to_hr $(calculate_repository_mean_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating average annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating average annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# print the stats
		if $success; then
			echo "Statistics for repository '$repo':"$'\n'
			echo "${config_keep_days} day(s), ${config_keep_months} month(s), and ${config_keep_years} year(s) of data will be preserved."$'\n'
			echo "Total Disk Space Used:    $disk_usage"
			echo "Available Disk Space:     $disk_free"
			echo 'Daily Data Disk Usage:'
			echo "  Minimum:                $min_daily_usage"
			echo "  Median:                 $median_daily_usage"
			echo "  Maximum:                $max_daily_usage"
			echo "  Average:                $mean_daily_usage"
			echo 'Monthly Data Disk Usage:'
			echo "  Minimum:                $min_monthly_usage"
			echo "  Median:                 $median_monthly_usage"
			echo "  Maximum:                $max_monthly_usage"
			echo "  Average:                $mean_monthly_usage"
			echo 'Annual Data Disk Usage:'
			echo "  Minimum:                $min_annual_usage"
			echo "  Median:                 $median_annual_usage"
			echo "  Maximum:                $max_annual_usage"
			echo "  Average:                $mean_annual_usage"
		else
			echo "ERROR! An error occurred while gathering statistics, so can't safely print them!"
		fi
	else
		$verbose && echo "ERROR! Repository '${repo}' doesn't exist!"
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi
	
	$success
}


# see if any arguments were passed in
if [ $# -gt 0 ]; then
	# if so, step through them all and pre-process them (we do this so we can 
	# support multiple options specified together, e.g.: -abc vs. -a -b -c),
	# GNU-style long options with alternate style values, and for easier
	# actual handling
	argv=()
	while [ $# -gt 0 ]; do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${1:0:1}" = "-" ]; then
			# is it a GNU-style long option (e.g. starts with a double-dash)?
			if [ "${1:0:2}" = "--" ]; then
				# push the option (everything before an equals) onto argv
				argv=("${argv[@]}" "${1%%=*}")
				
				# is it the alternate "--long-opt=value" format? if so, make it
				# "--long-opt value" format buy pushing the value (everything after the
				# equals) on as a separate argument
				case "$1" in *=*)
					argv=("${argv[@]}" "${1##*=}") ;;
				esac
			# otherwise, is it multiple single options specified together?
			elif [ ${#1} -gt 2 ]; then
				tmp="$1"
				# push each onto argv as single options
				for (( i=1; i < ${#tmp}; i++ )); do
					argv=("${argv[@]}" "-${tmp:$i:1}")
				done
			# otherwise, it must be a single option so just push it onto argv
			else
				argv=("${argv[@]}" "$1")
			fi
			shift
		# arguments just get pushed onto argv in order too
		else
			argv=("${argv[@]}" "$1")
			shift
		fi
	done
	argc=${#argv[@]}
		
	# now that we've pre-processed the options, go through them all for real
	for (( i=0; i<$argc; i++ )); do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${argv[$i]:0:1}" = "-" ]; then
			case "${argv[$i]}" in
				# see if the user intended us to run in verbose mode
				"-v" | "--verbose")
					verbose=true
					;;
				# see if the user requested help
				"-h" | "--help")
					usage
					exit
					;;
				# see if the user requested the version
				"-V" | "--version")
					version
					exit
					;;
				# see if the user is specifying a config file
				"-c" | "--config")
					# the next argument should be the config file
					((i++))
					config_file="${argv[$i]}"
					
					# does the config file exist?
					if [ -n "$config_file" -a -e "$config_file" ]; then
						$verbose && echo "Using config file '${config_file}'."
					else
						echo "ERROR! Config file '${config_file}' does not exist!"
						echo 'Exiting.'
						notify "UNKNOWN" "ERROR" "The '${config_file}' configuration file doesn't exist!"
						exit 1
					fi
					;;
				# see if the user is requesting we test the config file
				"-t")
					# load the config file
					if load_config "$config_file"; then
						echo "Config file '${config_file}' loaded & tested successfully."
						echo 'Exiting.'
						exit
					else
						echo "ERROR! An error occurred while loading the config file '${config_file}'!"
						echo 'Exiting.'
						notify "UNKNOWN" "ERROR" "An error occurred while loading the config file '${config_file}'!"
						exit 1
					fi
					;;
				# see if the user is requesting a dry run
				"-n" | "--dry-run")
					dry_run=true
					;;
				# see if the user wants to disable email notifications
				"-N" | "--no-notify")
					notifications=false
					;;
				# handle other options
					
				# unknown option
				*)
					echo "$tool: Unknown option '$1'!"
					exit 1
					;;
			esac
		# handle arguments
		else
			# one would normally handle arguments here
			case "${argv[$i]}" in
				# see if the user specified we initialize a repository
				init)
					((i++))
					repository_dir="${argv[$i]}"
					((i++))
					repository_year="${argv[$i]}"
					# check/create repository directories
					if init_repository "$repository_dir" "$repository_year"; then
					      $verbose && echo 'Repository directories found/created successfully.'
					else
					      echo "ERROR! An error occurred while checking or creating the repository directories in '${repository_dir}'!"
					      echo 'Exiting.'
					      notify "$repository_dir" "ERROR" "An error occurred while checking or creating the repository directories in '${repository_dir}'!"
					      exit 1
					fi
					;;
				# see if the user specified we run storage management process
				run)
					# load the config file
					if load_config "$config_file"; then
						# init the new year, if necessary (we only do this on the 1st of the year)
						if (( ( 10#$m == 1 ) && ( 10#$d == 1 ) )); then
							$verbose && echo -n "Creating new '$y' year directory... "
							if init_repository "$config_repository" "$y"; then
								$verbose && echo "Done."
							else
								echo "ERROR! An error occurred while creating the new '$y' year directory in '${config_repository}'!"
								echo 'Exiting.'
								notify "$config_repository" "ERROR" "An error occurred while creating the new '$y' year directory in '${config_repository}'!"
								exit 1
							fi
						fi
						
						# update convenience symlinks
						$verbose && echo "Updating convenience symlinks in repository '${config_repository}'..."
						if init_repository_symlinks "$config_repository"; then
							$verbose && echo 'Done.'
						else
							$verbose && echo 'ERROR!'
							echo 'WARNING: An error occurred while creating/updating convenience symlinks. Proceeding, but something may be wrong!'
							notify "$config_repository" "WARNING" "An error occurred while creating/updating convenience symlinks. Proceeding, but something may be wrong!"
						fi
						
						# roll the file sets in the directories
						$verbose && echo "Processing directories in repository '${config_repository}'..."
						if roll_repository_directories "$config_repository"; then
							$verbose && echo 'Done.'
						else
							$verbose && echo 'ERROR!'
							notify "$config_repository" "ERROR" "An error occurred while processing directories!"
							exit 1
						fi
					else
						echo "ERROR! An error occurred while loading the config file '${config_file}'!"
						echo 'Exiting.'
						notify "$config_repository" "ERROR" "An error occurred while loading the '${config_file}' configuration file!"
						exit 1
					fi
					;;
				# see if the user requested stats
				stats)
					# load the config file
					if load_config "$config_file"; then
						# print out the stats
						if ! print_repository_stats "$config_repository"; then
							echo 'ERROR! An error occurred while generating stats!'
							echo 'Exiting!'
							notify "$config_repository" "ERROR" "An error occurred while generating stats!"
							exit 1
						fi
					else
						echo "ERROR! An error occurred while loading the config file '${config_file}'!"
						echo 'Exiting.'
						notify "$config_repository" "ERROR" "An error occurred while loading the '${config_file}' configuration file!"
						exit 1
					fi
					;;
				*)
					echo "$tool: Unknown command '${argv[$i]}'!"
					exit 1
					;;
			esac
		fi
	done
else
	echo "No options or arguments were specified!"$'\n'
	usage
	exit 1
fi
