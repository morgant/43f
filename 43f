#!/bin/bash

# 
# 43f - A simple date-based storage management utility based on the forty-three 
#        folders concept from David Allen's "Getting Things Done" program. It
#        maintains 43 folders per year (one for every month [12] and one for 
#        every possible date in a month [31], therefore allowing you to store 
#        up to 31 daily file sets, 12 monthly file sets, and as many annual 
#        file sets as you would like. It is ideal for managing backup/snapshot
#        sets, but should be flexible enough for any number of uses.
# 
# CHANGE LOG:
# 
# v0.1   - 2009-03-07 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial development.
# v0.1.1 - 2013-06-05 - Morgan Aldridge
#                       Added optional year parameter to 'init' command.
# 
# LICENSE:
# 
# Copyright (c) 2009-2013, Morgan Aldridge. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

# info
tool=$(basename "$0")
version='0.1.1'
copyright='Copyright (c) 2009-2013 Morgan Aldridge'

# global variables
verbose=false
dry_run=false
notifications=true
config_file='/usr/local/etc/43f.conf'
config_repository='/usr/local/var/db/43f'
config_notify_email='root'
config_keep_days=31
config_keep_months=12
config_keep_years=10
config_date_format="%Y-%m-%d-%H%M"

y=`date "+%Y"`
m=`date "+%m"`
d=`date "+%d"`

# print usage instructions (help)
function usage() {
	echo "Usage: $tool [-h|-t|-V] [-v] [-c file] COMMAND"
	echo
	echo 'Options:'
	echo '  -v                   : verbose output'
	echo '  -V, --version        : print the version number and exit'
	echo '  -h, --help           : print these usage instructions and exit'
	echo '  -c, --config=file    : specify an alternate config file'
	echo '                DEFAULT: /usr/local/etc/43f.conf'
	echo '  -t                   : check the config file and exit'
	echo "  -n, --dry-run        : don't actually move/delete any files"
	echo '  -N, --no-notify      : disable email notifications'
	echo
	echo 'Commands:'
	echo '  init <path> [<year>] : initialize specified repository'
	echo '  run                  : perform storage management'
	echo '  stats                : print repository stats'
	echo
	echo 'Config File Options:'
	echo '  repository           : absolute path to archive repository'
	echo '                DEFAULT: /usr/local/var/db/43f'
	echo '  notify               : email address(es) to send notifications to'
	echo '                DEFAULT: root'
	echo '  days                 : number of daily file sets to preserve (1-31)'
	echo '                DEFAULT: 31'
	echo '  months               : number of monthly file sets to preserve (1-12)'
	echo '                DEFAULT: 12'
	echo '  years                : number of annual file sets to preserve (1+)'
	echo '                DEFAULT: 10'
}						  

# print version info
function version() {
	echo "$tool v$version $copyright"
}

# find using extended regular expressions
function Efind() {
	local path="$1"
	shift
	case "$(uname)" in
		Darwin)
			find -E "$path" "$@"
			;;
		Linux)
			find "$path" -regextype posix-extended "$@"
			;;
	esac
}

# sed using extended regular expressions
function Esed() {
	case "$(uname)" in
		Darwin)
			sed -E "$@"
			;;
		Linux)
			sed -r "$@"
			;;
	esac
}

# calculate relative dates
function reldate() {
	local adjust="$1"
	local format="$2"
	
	case "$(uname)" in
		Darwin)
			date -v"${adjust}" "$format"
			;;
		Linux)
			# convert BSD style adjustment to GNU style string
			if [[ "$adjust" =~ ^([+-]?[0-9]+)([ymwdHMS])$ ]]; then
				case "${BASH_REMATCH[2]}" in
					y)
						adjust="${BASH_REMATCH[1]} years"
						;;
					m)
						adjust="${BASH_REMATCH[1]} months"
						;;
					w)
						adjust="${BASH_REMATCH[1]} weeks"
						;;
					d)
						adjust="${BASH_REMATCH[1]} days"
						;;
					H)
						adjust="${BASH_REMATCH[1]} hours"
						;;
					M)
						adjust="${BASH_REMATCH[1]} minutes"
						;;
					S)
						adjust="${BASH_REMATCH[1]} seconds"
						;;
				esac
			fi
			date -d "$adjust" "$format"
			;;
	esac
}

# notify of errors/warnings via email
function notify() {
	local repo="$1"
	local type="$2"
	local message="$3"
	local time="$(date +"%Y-%m-%d %H:%M:%S")"
	
	if $notifications; then
		mail -s "${tool}: ${type} in repository '${repo}' at ${time}" "$config_notify_email" <<-EOM
			$type in $tool repository '${repo}':
			
			$message
			
			$tool $version @ $time
		EOM
	fi
}

# load the config file
function load_config() {
	local success
	local var
	local val
	local config_file
	success=true
	config_file="$1"
	# does the config file exist?
	if [ -n "$config_file" -a -e "$config_file" ]; then
		if $verbose; then echo "Loading config file '${config_file}'..."; fi
		while IFS== read var val; do
			case "$var" in
				\#*)
					# do nothing - this would be a comment
					;;
				repository)
					if [ -n "$val" -a -d "$val" ]; then
						config_repository="$val"
						if $verbose ; then
							printf "  '%s' set to '%s'.\n" "$var" "$config_repository"
						fi
					else
						printf "  ERROR! '%s' value in config file is either invalid or not a directory! You may need to run '43f init' to initialize the repository.\n" "$var"
						notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file} configuration file is either invalid or is not a directory! You may need to run '43f init' to initialize the repository."
						success=false
					fi
					;;
				notify)
					if echo "$val" | grep -q -i -E '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$' ; then
						config_notify_email="$val"
						if $verbose ; then
							printf "  '%s' set to '%s'.\n" "$var" "$config_notify_email"
						fi
					else
						printf "  ERROR! '%s' value in config file is not a valid email address!\n" "$var"
						notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is not a valid email address!"
						success=false
					fi
					;;
				days)
					if (( ( "$val" >= 1 ) && ( "$val" <= 31 ) )); then
						config_keep_days="$val"
						if $verbose; then echo "  '$var' set to '$config_keep_days'."; fi
					else
						echo "  ERROR! '$var' value in config file is out of range (1-31)!"
						notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range (1-31)!"
						success=false
					fi
					;;
				months)
					if (( ( "$val" >= 1 ) && ( "$val" <= 12 ) )); then
						config_keep_months="$val"
						if $verbose; then echo "  '$var' set to '$config_keep_months'."; fi
					else
						echo "  ERROR! '$var' value in config file is out of range (1-12)!"
						notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range (1-12)!"
						success=false
					fi
					;;
				years)
					if (( "$val" >= 1 )); then
						config_keep_years="$val"
						if $verbose; then echo "  '$var' set to '$config_keep_years'."; fi
					else
						echo "  ERROR! '$var' value in config file is out of range (1+)!"
						notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range (1+)!"
						success=false
					fi
					;;
				datestamp)
						if [[ "$val" =~ ^[YmdHMS%.-]+$ ]]; then
							config_date_format="$val"
							if $verbose; then echo "  '$var' set to '$config_date_format'."; fi
						else
							echo "  ERROR! '$var' value in config file is out of range!"
							notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range!"
							success=false
						fi
					;;
				*)
					printf "  Warning: Ignored unknown configuration variable '%s'.\n" "$var"
					;;
			esac
		done < "$config_file"
		
		if $verbose; then echo '  Done.'; fi
	else
		if $verbose; then echo "ERROR! Config file '${config_file}' does not exist!"; fi
		notify "UNKNOWN" "ERROR" "The '${config_file}' does not exist!"
		success=false
	fi
		
	$success
}

# determine whether repository exists
function does_repository_exist() {
	local success
	local repo
	success=true
	repo="$1"
	
	if [ -z "$repo" -o ! -d "$repo" ]; then
		success=false
	fi
	
	$success
}

# convert a date format string to a regular expression
# 
# # this and compare_date_stamped_filenames() use `sed`/`grep`, but should use something like http://sprunge.us/LZjS
function date_format_to_regex() {
	local success=true
	local date_format="$1"
	
	# replace %Y with four digit year match
	date_format=$(echo -n "$date_format" | Esed "s/%Y/([0-9]{4})/g")
	
	# replace %m with two digit month match
	date_format=$(echo -n "$date_format" | Esed "s/%m/(0[123456789]|1[12])/g")
	
	# replace %d with two digit day match
	date_format=$(echo -n "$date_format" | Esed "s/%d/(0[123456789]|[12][0-9]|3[01])/g")
	
	# replace %H with two digit hour match
	date_format=$(echo -n "$date_format" | Esed "s/%H/([01][0-9]|2[0123])/g")
	
	# replace %M/%S with two digit minute/second match
	date_format=$(echo -n "$date_format" | Esed "s/(%M|%S)/([012345][0-9])/g")
	
	# replace %% with a single % (this should always be done last)
	date_format=$(echo -n "$date_format" | Esed "s/%%/%/g")
	
	echo -n "$date_format"
	
	$success;
}

# compare two date stamped filenames (note: datestamp must match 
# returns 0 for no match, 1 if string1's timestamp is higher, or 2 if string2's datestamp is higher
# 
# this and date_format_to_regex() use `sed`/`grep`, but should use something like http://sprunge.us/LZjS
function compare_date_stamped_filenames() {
	local match=0
	local file1="$1"
	local file2="$2"
	local date_regex=$(date_format_to_regex "$config_date_format")
	
	# are the filenames the same length? we have to be dealing with the same date format here!
	if [ ${#file1} -eq ${#file2} ]; then
		# do our files have a datestamp matching our format?
		if [[ "$file1" =~ $date_regex && "$file2" =~ $date_regex ]]; then
			# do the filenames match if we strip out those datestamps?
			local file1_stripped=$(echo -n "$file1" | Esed "s/${date_regex}//g")
			local file2_stripped=$(echo -n "$file2" | Esed "s/${date_regex}//g")
			if [ "$file1_stripped" = "$file2_stripped" ]; then
				# now we compare the dates, fortunately we use `date` compatible date formats so this is
				# straightforward to extract the date from the filename & convert to epoch time
				local file1_date=$(echo -n "$file1" | grep -o -E "$date_regex")
				local file2_date=$(echo -n "$file2" | grep -o -E "$date_regex")
				file1_date=$(date -j -f "$config_date_format" "$file1_date" "+%s")
				file2_date=$(date -j -f "$config_date_format" "$file2_date" "+%s")
				if [ $file1_date -gt $file2_date ]; then
					match=1
				elif [ $file1_date -lt $file2_date ]; then
					match=2
				fi
			fi
		fi
	fi
	
	return $match
}

# initialize the repository
function init_repository() {
	local success=true
	local repo="$1"
	local year="$2"
	
	# default to this year (if one wasn't specified)
	if [ -z "$year" ]; then
		year="$y"
	# otherwise, validate the year input
	elif [[ ! "$year" =~ ^[0-9]{4}$ ]]; then
		echo "ERROR! Cannot initialize repository with invalid year '$year'!"
		notify "UNKNOWN" "ERROR" "Cannot initialize repository with invalid year '$year'!"
		success=false
	fi
	
	# does the repository exist?
	if [ -z "$repo" ]; then
		echo 'ERROR! Cannot initialize repository with empty path!'
		notify "UNKNOWN" "ERROR" "Cannot initialize repository with empty path!"
		success=false
	elif $success; then
		if $verbose; then echo -n "Repository directory '$repo' "; fi
		if does_repository_exist "$repo"; then
			if $verbose; then echo 'exists.'; fi
		else
			if $verbose ; then echo -n 'does not exist. Creating... '; fi
			if $dry_run || mkdir -p "$repo"; then
				if $verbose; then echo 'Done.'; fi
			else
				if $verbose; then echo 'Error!'; fi
				notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${repo}' repository directory!"
				success=false
			fi
		fi
	fi
		
	# check for year subdirectory & create if necessary
	if $success; then
		year_dir="$repo/$year"
		if $verbose ; then
			printf "Year Directory '%s' " "$year_dir"
		fi
		if [ -d "$year_dir" ] ; then
			if $verbose ; then
				printf "exists.\n"
			fi
		else
			if $verbose; then
				printf "does not exist. Creating... "
			fi
			if $dry_run || mkdir "$year_dir" ; then
				if $verbose ; then
					printf "Done.\n"
				fi
			else
				if $verbose ; then
					printf "ERROR!\n"
					notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${year_dir}' year directory!"
				fi
				success=false
			fi
		fi
	fi
	
	# step through the month directories, checking for them & creating as necessary
	if $success; then
		local month
		for (( month=1; month<=12; month++ )); do
			local month_dir
			# check for month directory
			printf -v month_dir "%s/%s/m%02d" "$repo" "$year" "$month"
			if $verbose; then echo -n "Month Directory ${month_dir} "; fi
			if [ -d "$month_dir" ]; then
				if $verbose; then echo "exists."; fi
			else
				# create the month directory
				if $verbose; then echo -n "does not exist. Creating... "; fi
				if $dry_run || mkdir "$month_dir"; then
					if $verbose; then echo "Done."; fi
				else
					if $verbose; then echo "ERROR!"; fi
					notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${month_dir}' month directory!"
					success=false
				fi
			fi
		done
	fi
	
	# step through the day directories, checking for them & creating as necessary
	if $success; then
		local day
		for (( day=1; day<=31; day++ )); do
		      local day_dir
		      # check for the day directory
		      printf -v day_dir "%s/%s/d%02d" "$repo" "$year" "$day"
		      if $verbose; then echo -n "Day Directory ${day_dir} "; fi
		      if [ -d "$day_dir" ]; then
		      	if $verbose; then echo "exists."; fi
		      else
		      	# create the day directory
		      	if $verbose; then echo -n "does not exist. Creating... "; fi
		      	if $dry_run || mkdir "$day_dir"; then
		      		if $verbose; then echo "Done."; fi	
		      	else
		      		if $verbose; then echo "ERROR!"; fi
		      		notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${day_dir}' day directory!"
		      		success=false
		      	fi
		      fi
		done
	fi
	
	$success
}

function init_repository_symlinks() {
	local success
	local repo
	success=true
	repo="$1"
	
	if does_repository_exist "$repo"; then
		# create symlink for 'today'
		local today_dir
		local today
		today="$d"
		today_dir="$repo/$y/d${today}"
		if $verbose; then echo -n "Creating symlink for 'today' pointing to '$today_dir'... "; fi
		if ln -f -n -s "$today_dir" "$repo/today"; then
			if $verbose; then echo 'Done.'; fi
		else
			if $verbose; then echo 'ERROR!'; fi
			notify "$repo" "ERROR" "An unknown error occurred while attempting to create the 'today' symlink pointing at the '${today_dir}' directory!"
			success=false
		fi
		
		# create symlink for 'yesterday'
		local yesterday_dir
		local yesterday
		yesterday=$(reldate -1d +%d)
		yesterday_dir="$repo/$y/d${yesterday}"
		if $verbose; then echo -n "Creating symlink for 'yesterday' pointing to '$yesterday_dir'... "; fi
		if ln -f -n -s "$yesterday_dir" "$repo/yesterday"; then
			if $verbose; then echo 'Done.'; fi
		else
			if $verbose; then echo 'ERROR!'; fi
			notify "$repo" "ERROR" "An unknown error occurred while attempting to create the 'yesterday' symlink pointing at the '${yesterday_dir}' directory!"
			success=false
		fi
		
		# create symlink for 'sunday' through 'saturday' for the past week (not including today)
		local weekday_dir
		local weekday_name
		local weekday
		for (( i=1; i<=7; i++ )); do
			weekday=$(reldate -${i}d +%d)
			weekday_dir="$repo/$y/d${weekday}"
			weekday_name=$(reldate -${i}d +%A | tr '[:upper:]' '[:lower:]')
			if $verbose; then echo -n "Creating symlink for '$weekday_name' pointing to '$weekday_dir'... "; fi
			if ln -f -n -s "$weekday_dir" "$repo/$weekday_name"; then
				if $verbose; then echo 'Done.'; fi
			else
				if $verbose; then echo 'ERROR!'; fi
				notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${weekday_name}' symlink pointing at the '${weekday_dir}' directory!"
				success=false
			fi
		done
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi
	
	$success
}

function roll_repository_daily_to_monthly() {
	local success=true
	local repo="$1"
	local day="$2"
	local month="$3"
	local mtime_today="$4"	# also include files modified today? "true"/"false"
	local year="$y"
	
	if does_repository_exist "$repo"; then
		local src
		local dst
		local mtime=''
		printf -v src "%s/%s/d%02d" "$repo" "$year" "$day"
		printf -v dst "%s/%d/m%02d" "$repo" "$year" "$month"
		if $verbose; then echo -n $'\n'"    Moving files & directories from '$src' to '$dst' ("; fi
		if $mtime_today; then
			if $verbose; then echo -n "including"; fi
		else
			if $verbose; then echo -n "excluding"; fi
			mtime='-mtime +0'
		fi
		if $verbose; then echo -n " those modified today)... "; fi
		
		# step through all the matching (i.e. with or without a modification date of today) in the src dir and move them to dst
		while IFS= read -r line; do
			# don't bother processing an empty line or is the src directory itself
			if [ -n "$line" ]; then
				if $verbose; then echo -n $'\n'"      '$line'... "; fi
				if $dry_run || mv "$line" "$dst/"; then
					if $verbose; then echo "Done."; fi
				else
				    if $verbose; then echo "ERROR!"; fi
				    notify "$repo" "ERROR" "An unknown error occurred while attempting to move the '${line}' file/directory into the '${dst}' directory!"
				    success=false
				fi
			fi
		done <<< "$(find "$src"  -mindepth 1 -maxdepth 1 $mtime| sort)"
		
		
		if $verbose; then echo "Done."; fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi
	
	$success
}

function consolidate_repository_monthly() {
	local success=true
	local repo="$1"
	local month="$2"
	local year="$y"
	
	if does_repository_exist "$repo"; then
		local dir
		printf -v dir "%s/%d/m%02d" "$repo" "$year" "$month"
		local last_file=''
		
		# step through all the files and directories and look for any with the same name except for a datestamp
		while IFS= read -r line; do
			# don't bother processing an empty line
			if [[ ( -n "$line" ) && ( "$line" != "$dir" ) ]]; then
				# if we don't have another file to compare against, we can't do anything
				if [ -n "$last_file" ]; then
					if $verbose; then echo -n $'\n'"  Comparing '$last_file' with '$line'... "; fi
					compare_date_stamped_filenames "$last_file" "$line"
					local match=$?
					# don't do anthing if the filenames don't match
					if [ $match -eq 0 ]; then
						if $verbose; then echo "NO MATCH!"; fi
					# if the first file has a newer date stamp, then keep it and remove the second
					elif [ $match -eq 1 ]; then
						if $verbose; then echo -n "Keeping the former... "; fi
						if $dry_run || rm -r "$line"; then
							if $verbose; then echo "Done."; fi
						else
						    if $verbose; then echo "ERROR!"; fi
						    notify "$repo" "ERROR" "An unknown error occurred while attempting to delete the '${line}' file/directory during consolidation of files in the '${dir}' directory!"
						    success=false
						fi
					# if the second file has a newer date stamp, then keep it and remove the first
					elif [ $match -eq 2 ]; then
						if $verbose; then echo -n "Keeping the latter... "; fi
						if $dry_run || rm -r "$last_file"; then
							if $verbose; then echo "Done."; fi
						else
						    if $verbose; then echo "ERROR!"; fi
						    notify "$repo" "ERROR" "An unknown error occurred while attempting to delete the '${last_file}' file/directory during consolidation of files in the '${dir}' directory!"
						    success=false
						fi
					fi
					
					if $verbose; then echo -n "    Done."$'\n'"  "; fi
				fi
				
				# store this filename to compare with the next one
				last_file="$line"
			fi
		done <<< "$(find "$dir" -mindepth 1 -maxdepth 1 | sort)" 
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi
	
	$success
}

function purge_year_directories() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		if $verbose; then echo; fi
		# calculate keep-through year
		local keep_through=$(reldate -$(( ${config_keep_years} - 1 ))y +%Y)
		
		# step through all the year directories that exist and delete any that are older than our "keep through" year
		while IFS= read -r line; do
			local year="$(basename "$line")"
			if [[ "$year" =~ ^[0-9]{4}$ ]] && (( $year < $keep_through )); then
				if $verbose; then echo -n "  Deleting $year directory... "; fi
				if $dry_run || rm -r "${repo}/${year}"; then
					if $verbose; then echo "Done."; fi
				else
					if $verbose; then echo "ERROR!"; fi
					notify "$repo" "ERROR" "An unknown error occurred while attempting to delete the '${repo}/${year}' year directory while purging old annual directories!"
					success=false
				fi
			else
				if $verbose; then echo "  Preserving $year directory."; fi
			fi
		done <<< "$(Efind "$repo" -mindepth 1 -maxdepth 1 -regex '.*/[0-9]{4}' | sort -nr)"
		if $verbose; then echo -n "  "; fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi
	
	$success
}

function roll_repository_directories() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		# calculate today & keep-through dates
		local today="$d"
		local keep_through=$(reldate -$((${config_keep_days} - 1 ))d +%d)
		if $verbose; then echo "Keeping files through 'd${keep_through}'."; fi
		
		# step through the subdirectories and "process" those that are outside the range to preserve (starting with yesterday)
		local year=$(reldate -1d +%Y)
		local month=$(reldate -1d +%m)
		local day=$(reldate -1d +%d)
		local day_dir=''
		local month_dir=''
		while (( 10#$day != 10#$today )); do
			# build the directory paths
			printf -v day_dir "%s/%d/d%02d" "$repo" "$year" "$day"
			printf -v month_dir "%s/%d/m%02d" "$repo" "$year" $(( 10#$month ))
			
			if $verbose; then echo -n "Processing directory '$day_dir'... "; fi
			# are we keeping a range that doesn't wrap (i.e. today is greater than the day through which we're keeping)?
			if (( ( 10#$today >= 10#$keep_through ) && ( 10#$day >= 10#$keep_through ) && ( 10#$day <= 10#$today ) )); then
				if $verbose; then echo 'Keeping.'; fi
			# or, are we keeping a range that wraps (i.e. the day through which we're keeping is greater than today)?
			elif (( ( 10#$today <= 10#$keep_through ) && ( ( 10#$day <= 10#$today ) || ( 10#$day >= 10#$keep_through ) ) )); then
				if $verbose; then echo 'Keeping.'; fi
			# only process if this is outside the range to keep
			else
				if $verbose; then echo -n $'\n''  Processing...'; fi
				
				# move the contents of the day's directory to the appropriate month's directory
				if roll_repository_daily_to_monthly "$repo" "$day" "$month" true; then
					if $verbose; then echo "  Done."; fi
				else
					echo 'ERROR!'
					echo "A fatal error occurred while attempting to move the contents of '$day_dir' to '$month_dir'!"
					echo 'Exiting.'
					notify "$repo" "ERROR" "A fatal error occurred while attempting to move the contents of '${day_dir}' to '${month_dir}'!"
					exit 1
				fi
			fi
			
			# decrement the day & wrap around day, month, and year if we've gone under
			day=$(( 10#$day - 1 ))
			if (( 10#$day < 1 )); then
				day=31
				month=$(( 10#$month - 1 ))
				if (( "$month" < 1 )); then
					month=12
					(( year-- ))
				fi
			fi
		done
		
		# we always process today (but we have to be extra careful since there's the possibility new files have already been stashed in it)
		if (( ( $year == $y ) && ( 10#$month == 10#$m ) )); then
			month=$(( 10#$month - 1 ));
			if (( 10#$month < 1 )); then
				month=12
				(( year-- ))
			fi
		fi
		printf -v day_dir "%s/%d/d%02d" "$repo" "$year" "$day"
		printf -v month_dir "%s/%d/m%02d" "$repo" "$year" "$month"
		if $verbose; then echo -n "Processing directory '$day_dir'... "$'\n'"  Processing (special)... "; fi
		# move the contents of the day's directory to the appropriate month's directory
		if roll_repository_daily_to_monthly "$repo" "$day" "$month" false; then
			if $verbose; then echo "  Done."; fi
		else
			echo 'ERROR!'
			echo "A fatal error occurred while attempting to move the contents of '$day_dir' to '$month_dir'!"
			echo 'Exiting.'
			notify "$repo" "ERROR" "A fatal error occurred while attempting to move the contents of '$day_dir' to '$month_dir'!"
			exit 1
		fi
		
		# consolidate files in the monthly directories
		if $success; then
			for (( month=1; month<=12; month++ )); do
				printf -v month_dir "%s/%d/m%02d" "$repo" "$year" "$month"
				if $verbose; then echo -n "Consolidating files & directories in '$month_dir'... "; fi
					if consolidate_repository_monthly "$repo" "$month"; then
						if $verbose; then echo "Done."; fi
					else
						if $verbose; then echo "ERROR!"; fi
						notify "$repo" "ERROR" "An error occurred while consolidating files & directories in '${month_dir}'!"
					fi
			done
		fi
		
		# finally, delete any year directories older than we're supposed to keep
		if $success; then
			if $verbose; then echo -n "Purging annual directories in '${repo}'... "; fi
			if purge_year_directories "$repo"; then
				if $verbose; then echo "Done."; fi
			else
				if $verbose; then echo "ERROR!"; fi
				notify "$repo" "ERROR" "An error occurred while purging annual directories in '${repo}'!"
			fi
		fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi
	
	$success
}

# convert kilobytes to human readable
function kb_to_hr() {
	local success=true
	local kb="$1"
	
	# is this a whole number?
	if [[ "$kb" =~ ^[0-9]+$ ]]; then
		# terabytes?
		if [ "$kb" -ge 1073741824 ]; then
			printf "%.0fTB" $(( $kb / 1073741824 ))
		# gigabytes?
		elif [ "$kb" -ge 1049000 ]; then
			printf "%.0fGB" $(( $kb / 1049000 ))
		# megabytes?
		elif [ "$kb" -ge 1024 ]; then
			printf "%.0fMB" $(( $kb / 1024 ))
		else
			printf "%.0fKB" $kb
		fi
	else
		success=false
	fi
	
	$success
}

# calculate file/directory disk usage in kilobytes
function du_kb() {
	local usage=$(du -ks "$1" | cut -f 1)
	if [ $? -eq 0 ]; then
		printf "%.0f" "$usage"
		true
	else
		false
	fi
}

# calculate file/directory available disk space in kilobytes
function df_kb() {
	local free=$(df -k "$1" | tail -n 1 | awk '{ print $4 }')
	if [ $? -eq 0 ]; then
		printf "%.0f" "$free"
		true
	else
		false
	fi
}

# get a list of disk space usages for daily directories
function get_daily_usages() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		# calculate today & keep-through dates
		local today="$d"
		local keep_through=$(reldate -${config_keep_days}d +%d)
		
		# step through the subdirectories and calculate usage for those that are inside the range to preserve (starting with today)
		local year="$y"
		local month="$m"
		local day="$d"
		local day_dir=''
		while true; do
			# build the directory path
			printf -v day_dir "%s/%d/d%02d" "$repo" "$year" $(( 10#$day ))
			
			# are we keeping a range that doesn't wrap (i.e. today is greater than the day through which we're keeping)?
			# or, are we keeping a range that wraps (i.e. the day through which we're keeping is greater than today)?
			if (( ( ( 10#$today >= 10#$keep_through ) && ( 10#$day >= 10#$keep_through ) && ( 10#$day <= 10#$today ) ) || ( ( 10#$today <= 10#$keep_through ) && ( ( 10#$day <= 10#$today ) || ( 10#$day >= 10#$keep_through ) ) ) )); then
				# calculate the usage, add to total, increment the counter
				local usage=$(du_kb "$day_dir")
				if [ $? -eq 0 ]; then
					printf "%.0f" "$usage"
				else
					success=false
				fi
			fi
			
			# decrement the day & wrap around day, month, and year if we've gone under
			day=$(( 10#$day - 1 ))
			if (( 10#$day < 1 )); then
				day=31
				month=$(( 10#$month - 1 ))
				if (( 10#$month < 1 )); then
					month=12
					(( year-- ))
				fi
			fi
			
			# if we've gone all the way back around to today, break out of the loop
			if [ "$day" -eq "$today" ]; then
				break;
			else
				printf "\n"
			fi
		done
	else	
		success=false
	fi
	
	$success
}

# get a list of disk space usages for monthly directories
function get_monthly_usages() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		# calculate this month & keep through months
		local this_month="$m"
		local keep_through="$(reldate -${config_keep_months}m +%m)"
		
		# step through the subdirectories and calculate usage for those that are inside the range to preserve (starting with this month)
		local year="$y"
		local month="$m"
		local month_dir=''
		while true; do
			# build the directory path
			printf -v month_dir "%s/%d/m%02d" "$repo" "$year" $(( 10#$month ))
			
			# are we keeping a range that doesn't wrap (i.e. this month is greater than the month through which we're keeping)?
			# or, are we keeping a range that wraps (i.e. the month through which we're keeping is greater than this month)?
			if (( ( ( 10#$this_month >= 10#$keep_through ) && ( 10#$month >= 10#$keep_through ) ) || ( ( 10#$this_month <= 10#$keep_through ) && ( ( 10#$month <= 10#$this_month ) || ( 10#$month >= 10#$keep_through ) ) ) )); then
				# calculate the usage, add to total, increment the counter
				local usage=$(du_kb "$month_dir")
				if [ $? -eq 0 ]; then
					printf "%.0f" "$usage"
				else
					success=false
				fi
			fi
			
			# decrement the month & wrap around month and year if we've gone under
			month=$(( 10#$month - 1))
			if (( 10#$month < 1 )); then
				month=12
				(( year-- ))
			fi
			
			# if we've gone all the way back around to this month, break out of the loop
			if [ "$month" -eq "$this_month" ]; then
				break;
			else
				printf "\n"
			fi
		done
	else
		success=false
	fi
	
	$success
}

# get a list of disk space usages for annual directories
function get_annual_usages() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		# calculate this year & keep through years
		local this_year="$y"
		local keep_through="$(reldate -${config_keep_years}y +%Y)"
		
		# step through the subdirectories and calculate usage
		local year="$y"
		local year_dir=''
		while (( year >= keep_through )); do
			# build the directory path
			printf -v year_dir "%s/%d" "$repo" "$year"
			
			# calculate the usage (if the year directory exists)
			if [ -d "$year_dir" ]; then
				local usage=$(du_kb "$year_dir")
				if [ $? -eq 0 ]; then
					printf "%.0f\n" "$usage"
				else
					success=false
				fi
			else
				printf "0\n"
			fi
			
			# decrement the year
			(( year-- ))
		done
	else
		success=false
	fi
	
	$success
}

# calculate the average (mean) daily disk usage for a repository
function calculate_repository_mean_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local total_usage=0
	local n=0 
	
	if does_repository_exist "$repo"; then
		local usage=0
		while IFS= read -r usage; do
		   (( total_usage += usage ))
		   (( n++ ))
		done <<< "$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		fi
	fi
	
	# output the average
	if $success; then
		printf "%.0f" $(( total_usage/n ))
	fi
	
	$success
}

# calculate the minimum daily disk usage for a repository
function calculate_repository_min_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local min_usage=''
	
	if does_repository_exist "$repo"; then
		local usage=0
		while IFS= read -r usage; do
			if [ -z "$min_usage" ]; then
				min_usage="$usage"
			elif [[ (( usage < min_usage )) ]]; then
				min_usage="$usage"
			fi
		done <<< "$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		fi
	fi
	
	# output the minimum
	if $success; then
		printf "%.0f" "$min_usage"
	fi
	
	$success
}

# calculate the median daily disk usage for a repository
function calculate_repository_median_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local usages=()
	
	if does_repository_exist "$repo"; then
		local usage=0
		while IFS= read -r usage; do
			usages+=("$usage")
		done <<< "$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		fi
	fi
	
	# output the minimum
	if $success; then
		local median=$(( ${#usages[@]} / 2 ))
		IFS=$'\n' usages=($(sort -n <<<"${usages[*]}"))
		median_usage="${usages[$median]}"
		printf "%.0f" "$median_usage"
	fi
	
	$success
}

# calculate the maximum daily disk usage for a repository
function calculate_repository_max_usage() {
	local success=true
	local repo="$1"
	local stratum="$2"
	local max_usage=''
	
	if does_repository_exist "$repo"; then
		local usage=0
		while IFS= read -r usage; do
			if [ -z "$max_usage" ]; then
				max_usage="$usage"
			elif [[ (( $usage > $max_usage )) ]]; then
				max_usage="$usage"
			fi
		done <<< "$(get_${stratum}_usages "$repo")"
		if [ $? -ne 0 ]; then
			success=false
		fi
	fi
	
	# output the maximum
	if $success; then
		printf "%.0f" "$max_usage"
	fi
	
	$success
}

# print out repository stats
function print_repository_stats() {
	local success=true
	local repo="$1"
	
	if does_repository_exist "$repo"; then
		local disk_usage
		local disk_free
		local min_daily_usage
		local min_monthly_usage
		local min_annual_usage
		local median_daily_usage
		local median_monthly_usage
		local median_annual_usage
		local max_daily_usage
		local max_monthly_usage
		local max_annual_usage
		local mean_daily_usage
		local mean_monthly_usage
		local mean_annual_usage
		
		# calculate disk usage for the repository
		disk_usage=$(kb_to_hr $(du_kb "$repo"))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate available disk space
		disk_free=$(kb_to_hr $(df_kb "$repo"))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating disk space available to the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating disk space available to the repository '$repo'!"
			success=false
		fi
		
		# calculate minimum daily disk usage
		min_daily_usage=$(kb_to_hr $(calculate_repository_min_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating minimum daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating minimum daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate median daily disk usage
		median_daily_usage=$(kb_to_hr $(calculate_repository_median_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating median daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating median daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate maximum daily disk usage
		max_daily_usage=$(kb_to_hr $(calculate_repository_max_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating maximum daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating maximum daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate average (mean) daily disk usage
		mean_daily_usage=$(kb_to_hr $(calculate_repository_mean_usage "$repo" daily))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating average daily disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating average daily disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate minimum monthly disk usage
		min_monthly_usage=$(kb_to_hr $(calculate_repository_min_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating minimum monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating minimum monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate median monthly disk usage
		median_monthly_usage=$(kb_to_hr $(calculate_repository_median_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating median monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating median monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate maximum monthly disk usage
		max_monthly_usage=$(kb_to_hr $(calculate_repository_max_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating maximum monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating maximum monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate average monthly disk usage
		mean_monthly_usage=$(kb_to_hr $(calculate_repository_mean_usage "$repo" monthly))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating average monthly disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating average monthly disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate minimum annual disk usage
		min_annual_usage=$(kb_to_hr $(calculate_repository_min_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating minimum annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating minimum annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate median annual disk usage
		median_annual_usage=$(kb_to_hr $(calculate_repository_median_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating median annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating median annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate maximum annual disk us
		max_annual_usage=$(kb_to_hr $(calculate_repository_max_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating maximum annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating maximum annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# calculate average annual disk usage
		mean_annual_usage=$(kb_to_hr $(calculate_repository_mean_usage "$repo" annual))
		if [ $? -ne 0 ]; then
			echo "ERROR! An error occurred while calculating average annual disk space used by the repository '$repo'!"
			notify "$repo" "ERROR" "An error occurred while calculating average annual disk space used by the repository '$repo'!"
			success=false
		fi
		
		# print the stats
		if $success; then
			echo "Statistics for repository '$repo':"$'\n'
			echo "${config_keep_days} day(s), ${config_keep_months} month(s), and ${config_keep_years} year(s) of data will be preserved."$'\n'
			echo "Total Disk Space Used:    $disk_usage"
			echo "Available Disk Space:     $disk_free"
			echo 'Daily Data Disk Usage:'
			echo "  Minimum:                $min_daily_usage"
			echo "  Median:                 $median_daily_usage"
			echo "  Maximum:                $max_daily_usage"
			echo "  Average:                $mean_daily_usage"
			echo 'Monthly Data Disk Usage:'
			echo "  Minimum:                $min_monthly_usage"
			echo "  Median:                 $median_monthly_usage"
			echo "  Maximum:                $max_monthly_usage"
			echo "  Average:                $mean_monthly_usage"
			echo 'Annual Data Disk Usage:'
			echo "  Minimum:                $min_annual_usage"
			echo "  Median:                 $median_annual_usage"
			echo "  Maximum:                $max_annual_usage"
			echo "  Average:                $mean_annual_usage"
		else
			echo "ERROR! An error occurred while gathering statistics, so can't safely print them!"
		fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi
	
	$success
}


# see if any arguments were passed in
if [ $# -gt 0 ]; then
	# if so, step through them all and pre-process them (we do this so we can 
	# support multiple options specified together, e.g.: -abc vs. -a -b -c),
	# GNU-style long options with alternate style values, and for easier
	# actual handling
	argv=()
	while [ $# -gt 0 ]; do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${1:0:1}" = "-" ]; then
			# is it a GNU-style long option (e.g. starts with a double-dash)?
			if [ "${1:0:2}" = "--" ]; then
				# push the option (everything before an equals) onto argv
				argv=("${argv[@]}" "${1%%=*}")
				
				# is it the alternate "--long-opt=value" format? if so, make it
				# "--long-opt value" format buy pushing the value (everything after the
				# equals) on as a separate argument
				case "$1" in *=*)
					argv=("${argv[@]}" "${1##*=}") ;;
				esac
			# otherwise, is it multiple single options specified together?
			elif [ ${#1} -gt 2 ]; then
				tmp="$1"
				# push each onto argv as single options
				for (( i=1; i < ${#tmp}; i++ )); do
					argv=("${argv[@]}" "-${tmp:$i:1}")
				done
			# otherwise, it must be a single option so just push it onto argv
			else
				argv=("${argv[@]}" "$1")
			fi
			shift
		# arguments just get pushed onto argv in order too
		else
			argv=("${argv[@]}" "$1")
			shift
		fi
	done
	argc=${#argv[@]}
		
	# now that we've pre-processed the options, go through them all for real
	for (( i=0; i<$argc; i++ )); do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${argv[$i]:0:1}" = "-" ]; then
			case "${argv[$i]}" in
				# see if the user intended us to run in verbose mode
				"-v" | "--verbose")
					verbose=true
					;;
				# see if the user requested help
				"-h" | "--help")
					usage
					exit
					;;
				# see if the user requested the version
				"-V" | "--version")
					version
					exit
					;;
				# see if the user is specifying a config file
				"-c" | "--config")
					# the next argument should be the config file
					((i++))
					config_file="${argv[$i]}"
					
					# does the config file exist?
					if [ -n "$config_file" -a -e "$config_file" ]; then
						if $verbose; then echo "Using config file '${config_file}'."; fi
					else
						echo "ERROR! Config file '${config_file}' does not exist!"
						echo 'Exiting.'
						notify "UNKNOWN" "ERROR" "The '${config_file}' configuration file doesn't exist!"
						exit 1
					fi
					;;
				# see if the user is requesting we test the config file
				"-t")
					# load the config file
					if load_config "$config_file"; then
						echo "Config file '${config_file}' loaded & tested successfully."
						echo 'Exiting.'
						exit
					else
						echo "ERROR! An error occurred while loading the config file '${config_file}'!"
						echo 'Exiting.'
						notify "UNKNOWN" "ERROR" "An error occurred while loading the config file '${config_file}'!"
						exit 1
					fi
					;;
				# see if the user is requesting a dry run
				"-n" | "--dry-run")
					dry_run=true
					;;
				# see if the user wants to disable email notifications
				"-N" | "--no-notify")
					notifications=false
					;;
				# handle other options
					
				# unknown option
				*)
					echo "$tool: Unknown option '$1'!"
					exit 1
					;;
			esac
		# handle arguments
		else
			# one would normally handle arguments here
			case "${argv[$i]}" in
				# see if the user specified we initialize a repository
				init)
					((i++))
					repository_dir="${argv[$i]}"
					((i++))
					repository_year="${argv[$i]}"
					# check/create repository directories
					if init_repository "$repository_dir" "$repository_year"; then
					      if $verbose; then echo 'Repository directories found/created successfully.'; fi
					else
					      echo "ERROR! An error occurred while checking or creating the repository directories in '${repository_dir}'!"
					      echo 'Exiting.'
					      notify "$repository_dir" "ERROR" "An error occurred while checking or creating the repository directories in '${repository_dir}'!"
					      exit 1
					fi
					;;
				# see if the user specified we run storage management process
				run)
					# load the config file
					if load_config "$config_file"; then
						# update convenience symlinks
						if $verbose; then echo -n "Updating convenience symlinks in repository '${config_repository}'... "; fi
						if init_repository_symlinks "$config_repository"; then
							if $verbose; then echo 'Done.'; fi
						else
							if $verbose; then echo 'ERROR!'; fi
							echo 'WARNING: An error occurred while creating/updating convenience symlinks. Proceeding, but something may be wrong!'
							notify "$config_repository" "WARNING" "An error occurred while creating/updating convenience symlinks. Proceeding, but something may be wrong!"
						fi
						
						# roll the file sets in the directories
						if $verbose; then echo -n "Processing directories in repository '${config_repository}'... "; fi
						if roll_repository_directories "$config_repository"; then
							if $verbose; then echo 'Done.'; fi
						else
							if $verbose; then echo 'ERROR!'; fi
							notify "$config_repository" "ERROR" "An error occurred while processing directories!"
							exit 1
						fi
					else
						echo "ERROR! An error occurred while loading the config file '${config_file}'!"
						echo 'Exiting.'
						notify "$config_repository" "ERROR" "An error occurred while loading the '${config_file}' configuration file!"
						exit 1
					fi
					;;
				# see if the user requested stats
				stats)
					# load the config file
					if load_config "$config_file"; then
						# print out the stats
						if ! print_repository_stats "$config_repository"; then
							echo 'ERROR! An error occurred while generating stats!'
							echo 'Exiting!'
							notify "$config_repository" "ERROR" "An error occurred while generating stats!"
							exit 1
						fi
					else
						echo "ERROR! An error occurred while loading the config file '${config_file}'!"
						echo 'Exiting.'
						notify "$config_repository" "ERROR" "An error occurred while loading the '${config_file}' configuration file!"
						exit 1
					fi
					;;
				*)
					echo "$tool: Unknown command '${argv[$i]}'!"
					exit 1
					;;
			esac
		fi
	done
else
	echo "No options or arguments were specified!"$'\n'
	usage
	exit 1
fi