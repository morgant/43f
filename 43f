#!/bin/bash

# 
# 43f - A simple time-based storage management utility based on the forty-three 
#        folders concept from David Allen's "Getting Things Done" program. It
#        maintains a 43 folders per year (one for every month [12] and one for 
#        every possible date in a month [31], therefore allowing you to store 
#        up to 31 daily file sets, 12 monthly file sets, and as many annual 
#        file sets as you would like. It is ideal for managing backup/snapshot
#        sets, but should be flexible enough for any number of uses.
# 
# v0.1   - 2009-03-07 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial development.
# 

version='0.1'
verbose=false
config_file='/usr/local/etc/43f.conf'
config_repository='/usr/local/var/db/43f'
config_test=false
command=''
notify_email='root'

y=`date "+%Y"`
m=`date "+%m"`
d=`date "+%d"`

function usage() {
	printf "Usage: 43f [-h|-t|-V] [-v] [-c file] COMMAND \n"
	printf "\nOptions:\n"
	printf "  -v            : verbose output\n"
	printf "  -V, --version : print the version number and exit\n"
	printf "  -h, --help    : print these usage instructions and exit\n"
	printf "  -c            : specify an alternate config file\n"
	printf "         DEFAULT: /usr/local/etc/43f.conf\n"
	printf "  -t            : check the config file and exit\n"
	printf "\nCommands:\n"
	printf "  init          : initialize repository\n"
	printf "\nConfig File Options:\n"
	printf "  repository    : absolute path to archive repository\n"
	printf "  notify        : email address to send notifications to\n"
}

function load_config() {
	local success
	local var
	local val
	success=true
	IFS==
	while read var val; do
		case "$var" in
			\#*)
				# do nothing - this would be a comment
				;;
			repository)
				if [ -n "$val" -a -d "$val" ]; then
					config_repository="$val"
					if $verbose ; then
						printf "'%s' set to '%s'.\n" "$var" "$config_repository"
					fi
				else
					printf "ERROR! '%s' value in config file is either invalid or not a directory! You may need to run '43f init' to initialize the repository.\n" "$var"
					success=false
				fi
				;;
			notify)
				if echo "$val" | grep -q -i -E '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$' ; then
					notify_email="$val"
					if $verbose ; then
						printf "'%s' set to '%s'.\n" "$var" "$notify_email"
					fi
				else
					printf "ERROR! '%s' value in config file is not a valid email address!\n" "$var"
					success=false
				fi
				;;
			*)
				printf "Warning: Ignored unknown configuration variable '%s'.\n" "$var"
				;;
		esac
	done < "$1"
	
	$success
}

function init_repository() {
	local success
	success=true
	
	# does the repository exist?
	if $verbose ; then
		printf "Repository directory '%s' " "$config_repository"
	fi
	if [ -d "$config_repository" ] ; then
		if $verbose ; then
			printf "exists.\n"
		fi
	else
		if $verbose ; then
			printf "does not exist. Creating... "
		fi
		if mkdir -p $config_repository ; then
			if $verbose ; then
				printf "Done.\n"
			fi
		else
			if $verbose ; then
				printf "Error!\n"
			fi
			success=false
		fi
	fi
	
	# check for year subdirectory & create if necessary
	if $success; then
		year_dir="$config_repository/$y"
		if $verbose ; then
			printf "Year Directory '%s' " "$year_dir"
		fi
		if [ -d "$year_dir" ] ; then
			if $verbose ; then
				printf "exists.\n"
			fi
		else
			if $verbose; then
				printf "does not exist. Creating... "
			fi
			if mkdir $year_dir ; then
				if $verbose ; then
					printf "Done.\n"
				fi
			else
				if $verbose ; then
					printf "ERROR!\n"
				fi
				success=false
			fi
		fi
	fi
	
	# step through the month directories, checking for them & creating as necessary
	if $success; then
		local month
		for (( month=1; month<=12; month++ )); do
			local month_dir
			# check for month directory
			printf -v month_dir "%s/%s/m%02d" "$config_repository" "$y" "$month"
			if $verbose; then echo -n "Month Directory ${month_dir} "; fi
			if [ -d "$month_dir" ]; then
				if $verbose; then echo "exists."; fi
			else
				# create the month directory
				if $verbose; then echo -n "does not exist. Creating... "; fi
				if mkdir $month_dir; then
					if $verbose; then echo "Done."; fi
				else
					if $verbose; then echo "ERROR!"; fi
					success=false
				fi
			fi
		done
	fi
	
	# step through the day directories, checking for them & creating as necessary
	if $success; then
		local day
		for (( day=1; day<=31; day++ )); do
		      local day_dir
		      # check for the day directory
		      printf -v day_dir "%s/%s/d%02d" "$config_repository" "$y" "$day"
		      if $verbose; then echo -n "Day Directory ${day_dir} "; fi
		      if [ -d "$day_dir" ]; then
		      	if $verbose; then echo "exists."; fi
		      else
		      	# create the day directory
		      	if $verbose; then echo -n "does not exist. Creating... "; fi
		      	if mkdir $day_dir; then
		      		if $verbose; then echo "Done."; fi	
		      	else
		      		if $verbose; then echo "ERROR!"; fi
		      		success=false
		      	fi
		      fi
		done
	fi
	
	$success
}

if [ $# -gt 0 ]; then
	until [ $# -eq 0 ]; do
		case "$1" in
			-h|--help)
				usage
				exit
				;;
			-v)
				verbose=true
				if $verbose ; then
					printf "Enabling verbose mode.\n"
				fi
				;;
			-V|--version)
				printf "43f v%s\n" $version
				exit
				;;
			-c)
				if [ -n $2 -a -e $2 ]; then
					config_file="$2"
					if $verbose ; then
						printf "Using config file '%s'.\n" $config_file
					fi
				else
					printf "ERROR! Config file '%s' does not exist!\nExiting.\n" "$2"
					exit 1
				fi
				shift
				;;
			-t)
				config_test=true
				;;
			init)
				command="$1"
				shift
				;;
			*)
				
				;;
		esac
		shift
	done
	
	# load the config file
	if load_config "$config_file"; then
		if $verbose ; then
			printf "Config file loaded successfully.\n"
		fi
		if $config_test ; then
			if $verbose ; then
				printf "Exiting.\n"
			fi
			exit
		fi
	else
		printf "ERROR! An error occurred while loading the config file '%s'!\nExiting.\n" $config_file
		exit 1
	fi
	
	# check/create repository directories
	if init_repository ; then
		if $verbose ; then
			printf "Repository directories found/created successfully.\n"
		fi
	else
		if $verbose ; then
			printf "ERROR! An error occurred while checking or creating the repository directories in '%s'!\nExiting.\n" "$config_repository"
			exit 1
		fi
	fi
	
	
	
else
	usage
	exit 1
fi
