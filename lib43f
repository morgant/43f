#!/usr/bin/env bash

# find using extended regular expressions
function Efind() {
	local path="$1"
	shift
	local regex="$1"
	shift
	case "$(uname)" in
		Darwin)
			find -E "$path" -regex "$regex" "$@"
			;;
		Linux)
			find "$path" -regextype posix-extended -regex "$regex" "$@"
			;;
		OpenBSD)
			find "$path" "$@" | grep -E "$regex"
			;;
	esac
}

# sed using extended regular expressions
function Esed() {
	case "$(uname)" in
		Darwin|OpenBSD)
			sed -E "$@"
			;;
		Linux)
			sed -r "$@"
			;;
	esac
}

# calculate relative dates
function reldate() {
	local adjust="$1"
	local format="$2"

	# format string must start with a plus symbol
	if [[ "$format" =~ ^[^+] ]]; then
		return 1
	fi

	case "$(uname)" in
		Darwin)
			date -v"${adjust}" "$format"
			;;
		Linux)
			# convert BSD style adjustment to GNU style string
			if [[ "$adjust" =~ ^([+-]?[0-9]+)([ymwdHMS])$ ]]; then
				case "${BASH_REMATCH[2]}" in
					y)
						adjust="${BASH_REMATCH[1]} years"
						;;
					m)
						adjust="${BASH_REMATCH[1]} months"
						;;
					w)
						adjust="${BASH_REMATCH[1]} weeks"
						;;
					d)
						adjust="${BASH_REMATCH[1]} days"
						;;
					H)
						adjust="${BASH_REMATCH[1]} hours"
						;;
					M)
						adjust="${BASH_REMATCH[1]} minutes"
						;;
					S)
						adjust="${BASH_REMATCH[1]} seconds"
						;;
				esac
			fi
			date -d "$adjust" "$format"
			;;
		OpenBSD)
			# dadd doesn't handle zero offsets, so use date
			if [[ "$adjust" =~ ^[+-]?0[ymwdHMS]$ ]]; then
				date "$format"
			else
				dadd -f "${format#+}" "$(date "+%Y-%m-%d %H:%M:%S")" "$adjust"
			fi
			;;
	esac
}

# convert a date format string to a regular expression
function parse_date_format_value() {
	local success=true
	local in_format="$1"
	local in_date="$2"
	local parse_sequence="$3"
	local match_format="$in_format"

	# build a regular expression based on the date format
	# replace %Y with four digit year match
	if [ "$parse_sequence" = "%Y" ]; then
		match_format=$(echo -n "$match_format" | Esed "s/%Y/([0-9]{4})/g")
	else
		match_format=$(echo -n "$match_format" | Esed "s/%Y/[0-9]{4}/g")
	fi
	# replace %m with two digit month match
	if [ "$parse_sequence" = "%m" ]; then
		match_format=$(echo -n "$match_format" | Esed "s/%m/(0[123456789]|1[012])/g")
	else
		match_format=$(echo -n "$match_format" | Esed "s/%m/(?:0[123456789]|1[012])/g")
	fi
	# replace %d with two digit day match
	if [ "$parse_sequence" = "%d" ]; then
		match_format=$(echo -n "$match_format" | Esed "s/%d/(0[123456789]|[12][0-9]|3[01])/g")
	else
		match_format=$(echo -n "$match_format" | Esed "s/%d/(?:0[123456789]|[12][0-9]|3[01])/g")
	fi
	# replace %H with two digit hour match
	if [ "$parse_sequence" = "%H" ]; then
		match_format=$(echo -n "$match_format" | Esed "s/%H/([01][0-9]|2[0123])/g")
	else
		match_format=$(echo -n "$match_format" | Esed "s/%H/(?:[01][0-9]|2[0123])/g")
	fi
	# replace %M with two digit minute match
	if [ "$parse_sequence" = "%M" ]; then
		match_format=$(echo -n "$match_format" | Esed "s/%M/([012345][0-9])/g")
	else
		match_format=$(echo -n "$match_format" | Esed "s/%M/[012345][0-9]/g")
	fi
	# replace %S with two digit seconds match
	if [ "$parse_sequence" = "%S" ]; then
		match_format=$(echo -n "$match_format" | Esed "s/%M/([012345][0-9])/g")
	else
		match_format=$(echo -n "$match_format" | Esed "s/%M/[012345][0-9]/g")
	fi
	# replace %% with a single % (this should always be done last)
	match_format=$(echo -n "$match_format" | Esed "s/%%/%/g")

	# use the regex to parse the sequence out of the actual date (use grep with PCRE as we need to use non-capturing groups)
	local parsed_sequence="$(perl -pe "s/${match_format}/\1/g" <<< "$in_date")"
	if [ $? -eq 0 ]; then
		echo -n "$parsed_sequence"
	else
		success=false
	fi

	$success;
}

# convert date strings
function convdatestr() {
	local in_format="$1"
	local in_date="$2"
	local out_format="$3"

	# input format string can't be empty
	if [ -z "$in_format" ]; then
		return 1
	fi

	case "$(uname)" in
		Darwin|OpenBSD)
			date -j -f "$in_format" "$in_date" "$out_format"
			;;
		Linux)
			local has_year=false
			local has_month=false
			local has_day=false
			local has_hour=false
			local has_minute=false
			local has_second=false
			local year
			local month
			local day
			local hour
			local minute
			local second
			local tmp_date

			# parse out custom date
			if [[ "$in_format" =~ "%Y" ]]; then
				has_year=true
				year="$(parse_date_format_value "$in_format" "$in_date" "%Y")"
			fi
			if [[ "$in_format" =~ "%m" ]]; then
				has_month=true
				month="$(parse_date_format_value "$in_format" "$in_date" "%m")"
			fi
			if [[ "$in_format" =~ "%d" ]]; then
				has_day=true
				day="$(parse_date_format_value "$in_format" "$in_date" "%d")"
			fi
			if [[ "$in_format" =~ "%H" ]]; then
				has_hour=true
				hour="$(parse_date_format_value "$in_format" "$in_date" "%H")"
			fi
			if [[ "$in_format" =~ "%M" ]]; then
				has_minute=true
				minute="$(parse_date_format_value "$in_format" "$in_date" "%M")"
			fi
			if [[ "$in_format" =~ "%S" ]]; then
				has_second=true
				second="$(parse_date_format_value "$in_format" "$in_date" "%S")"
			fi

			# output the date into an intermediary format that Linux's date command understands
			if $has_year && $has_month && $has_day; then
				tmp_date="${year}-${month}-${day}"
			fi
			if $has_hour && $has_minute; then
				tmp_date="${tmp_date} ${hour}:${minute}"
				if $has_second; then
					tmp_date="${tmp_date}:${second}"
				fi
			fi

			date -d "$tmp_date" "$out_format"
			;;
	esac
}

# validate a day
function valid_day() {
	local success=false

	if (( ( "$1" >= 1 ) && ( "$1" <= 31 ) )); then
		success=true
	fi

	$success
}

# validate a month
function valid_month() {
	local success=false

	if (( ( "$1" >= 1 ) && ( "$1" <= 12 ) )); then
		success=true
	fi

	$success
}

# validate a year
function valid_year() {
	local success=false

	if [[ "$1" =~ ^[0-9]{4}$ ]]; then
		success=true
	fi

	$success
}

# load the config file
function load_config() {
 local success
 local var
 local val
 local config_file
 success=true
 config_file="$1"
 # does the config file exist?
 if [ -n "$config_file" -a -e "$config_file" ]; then
  if $verbose; then echo "Loading config file '${config_file}'..."; fi
  while IFS== read var val; do
   case "$var" in
    \#*)
     # do nothing - this would be a comment
     ;;
    repository)
     if [ -n "$val" -a -d "$val" ]; then
      config_repository="$val"
      if $verbose ; then
       printf "  '%s' set to '%s'.\n" "$var" "$config_repository"
      fi
     else
      printf "  ERROR! '%s' value in config file is either invalid or not a directory! You may need to run '43f init' to initialize the repository.\n" "$var"
      notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file} configuration file is either invalid or is not a directory! You may need to run '43f init' to initialize the repository."
      success=false
     fi
     ;;
    notify)
     if echo "$val" | grep -q -i -E '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$' ; then
      config_notify_email="$val"
      if $verbose ; then
       printf "  '%s' set to '%s'.\n" "$var" "$config_notify_email"
      fi
     else
      printf "  ERROR! '%s' value in config file is not a valid email address!\n" "$var"
      notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is not a valid email address!"
      success=false
     fi
     ;;
    days)
     if (( ( "$val" >= 1 ) && ( "$val" <= 31 ) )); then
      config_keep_days="$val"
      if $verbose; then echo "  '$var' set to '$config_keep_days'."; fi
     else
      echo "  ERROR! '$var' value in config file is out of range (1-31)!"
      notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range (1-31)!"
      success=false
     fi
     ;;
    months)
     if (( ( "$val" >= 1 ) && ( "$val" <= 12 ) )); then
      config_keep_months="$val"
      if $verbose; then echo "  '$var' set to '$config_keep_months'."; fi
     else
      echo "  ERROR! '$var' value in config file is out of range (1-12)!"
      notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range (1-12)!"
      success=false
     fi
     ;;
    years)
     if (( "$val" >= 1 )); then
      config_keep_years="$val"
      if $verbose; then echo "  '$var' set to '$config_keep_years'."; fi
     else
      echo "  ERROR! '$var' value in config file is out of range (1+)!"
      notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range (1+)!"
      success=false
     fi
     ;;
    datestamp)
      if [[ "$val" =~ ^[YmdHMS%.-]+$ ]]; then
       config_date_format="$val"
       if $verbose; then echo "  '$var' set to '$config_date_format'."; fi
      else
       echo "  ERROR! '$var' value in config file is out of range!"
       notify "UNKNOWN" "ERROR" "'${var}' value in '${config_file}' configuration file is out of range!"
       success=false
      fi
     ;;
    *)
     printf "  Warning: Ignored unknown configuration variable '%s'.\n" "$var"
     ;;
   esac
  done < "$config_file"

  if $verbose; then echo '  Done.'; fi
 else
  if $verbose; then echo "ERROR! Config file '${config_file}' does not exist!"; fi
  notify "UNKNOWN" "ERROR" "The '${config_file}' does not exist!"
  success=false
 fi

 $success
}

# determine whether repository exists
function does_repository_exist() {
	local success
	local repo
	success=true
	repo="$1"

	if [ -z "$repo" -o ! -d "$repo" ]; then
		success=false
	fi

	$success
}

# convert a date format string to a regular expression
#
# # this and compare_date_stamped_filenames() use `sed`/`grep`, but should use something like http://sprunge.us/LZjS
function date_format_to_regex() {
	local success=true
	local date_format="$1"

	# replace %Y with four digit year match
	date_format=$(echo -n "$date_format" | Esed "s/%Y/([0-9]{4})/g")

	# replace %m with two digit month match
	date_format=$(echo -n "$date_format" | Esed "s/%m/(0[123456789]|1[012])/g")

	# replace %d with two digit day match
	date_format=$(echo -n "$date_format" | Esed "s/%d/(0[123456789]|[12][0-9]|3[01])/g")

	# replace %H with two digit hour match
	date_format=$(echo -n "$date_format" | Esed "s/%H/([01][0-9]|2[0123])/g")

	# replace %M/%S with two digit minute/second match
	date_format=$(echo -n "$date_format" | Esed "s/(%M|%S)/([012345][0-9])/g")

	# replace %% with a single % (this should always be done last)
	date_format=$(echo -n "$date_format" | Esed "s/%%/%/g")

	echo -n "$date_format"

	$success;
}

# compare two date stamped filenames (note: datestamp must match
# returns 0 for no match, 1 if string1's timestamp is higher, or 2 if string2's datestamp is higher
#
# this and date_format_to_regex() use `sed`/`grep`, but should use something like http://sprunge.us/LZjS
function compare_date_stamped_filenames() {
	local match=0
	local file1="$1"
	local file2="$2"
	local date_regex=$(date_format_to_regex "$config_date_format")

	# are the filenames the same length? we have to be dealing with the same date format here!
	if [ ${#file1} -eq ${#file2} ]; then
		# do our files have a datestamp matching our format?
		if [[ "$file1" =~ $date_regex && "$file2" =~ $date_regex ]]; then
			# do the filenames match if we strip out those datestamps?
			local file1_stripped=$(echo -n "$file1" | Esed "s/${date_regex}//g")
			local file2_stripped=$(echo -n "$file2" | Esed "s/${date_regex}//g")
			if [ "$file1_stripped" = "$file2_stripped" ]; then
				# now we compare the dates, fortunately we use `date` compatible date formats so this is
				# straightforward to extract the date from the filename & convert to epoch time
				local file1_date=$(echo -n "$file1" | grep -o -E "$date_regex")
				local file2_date=$(echo -n "$file2" | grep -o -E "$date_regex")
				file1_date="$(convdatestr "$config_date_format" "$file1_date" "+%s")"
				file2_date="$(convdatestr "$config_date_format" "$file2_date" "+%s")"
				if [ $file1_date -gt $file2_date ]; then
					match=1
				elif [ $file1_date -lt $file2_date ]; then
					match=2
				fi
			fi
		fi
	fi

	return $match
}

# initialize the repository
function init_repository() {
	local success=true
	local repo="$1"
	local year="$2"

	# default to this year (if one wasn't specified)
	if [ -z "$year" ]; then
		year="$y"
	# otherwise, validate the year input
	elif [[ ! "$year" =~ ^[0-9]{4}$ ]]; then
		echo "ERROR! Cannot initialize repository with invalid year '$year'!"
		notify "UNKNOWN" "ERROR" "Cannot initialize repository with invalid year '$year'!"
		success=false
	fi

	# does the repository exist?
	if [ -z "$repo" ]; then
		echo 'ERROR! Cannot initialize repository with empty path!'
		notify "UNKNOWN" "ERROR" "Cannot initialize repository with empty path!"
		success=false
	elif $success; then
		if $verbose; then echo -n "Repository directory '$repo' "; fi
		if does_repository_exist "$repo"; then
			if $verbose; then echo 'exists.'; fi
		else
			if $verbose ; then echo -n 'does not exist. Creating... '; fi
			if $dry_run || mkdir -p "$repo"; then
				if $verbose; then echo 'Done.'; fi
			else
				if $verbose; then echo 'Error!'; fi
				notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${repo}' repository directory!"
				success=false
			fi
		fi
	fi

	# check for year subdirectory & create if necessary
	if $success; then
		year_dir="$repo/$year"
		if $verbose ; then
			printf "Year Directory '%s' " "$year_dir"
		fi
		if [ -d "$year_dir" ] ; then
			if $verbose ; then
				printf "exists.\n"
			fi
		else
			if $verbose; then
				printf "does not exist. Creating... "
			fi
			if $dry_run || mkdir "$year_dir" ; then
				if $verbose ; then
					printf "Done.\n"
				fi
			else
				if $verbose ; then
					printf "ERROR!\n"
					notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${year_dir}' year directory!"
				fi
				success=false
			fi
		fi
	fi

	# step through the month directories, checking for them & creating as necessary
	if $success; then
		local month
		for (( month=1; month<=12; month++ )); do
			local month_dir
			# check for month directory
			printf -v month_dir "%s/%s/m%02d" "$repo" "$year" "$(( 10#$month ))"
			if $verbose; then echo -n "Month Directory ${month_dir} "; fi
			if [ -d "$month_dir" ]; then
				if $verbose; then echo "exists."; fi
			else
				# create the month directory
				if $verbose; then echo -n "does not exist. Creating... "; fi
				if $dry_run || mkdir "$month_dir"; then
					if $verbose; then echo "Done."; fi
				else
					if $verbose; then echo "ERROR!"; fi
					notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${month_dir}' month directory!"
					success=false
				fi
			fi
		done
	fi

	# step through the day directories, checking for them & creating as necessary
	if $success; then
		local day
		for (( day=1; day<=31; day++ )); do
		      local day_dir
		      # check for the day directory
		      printf -v day_dir "%s/%s/d%02d" "$repo" "$year" "$(( 10#$day ))"
		      if $verbose; then echo -n "Day Directory ${day_dir} "; fi
		      if [ -d "$day_dir" ]; then
		      	if $verbose; then echo "exists."; fi
		      else
		      	# create the day directory
		      	if $verbose; then echo -n "does not exist. Creating... "; fi
		      	if $dry_run || mkdir "$day_dir"; then
		      		if $verbose; then echo "Done."; fi
		      	else
		      		if $verbose; then echo "ERROR!"; fi
		      		notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${day_dir}' day directory!"
		      		success=false
		      	fi
		      fi
		done
	fi

	$success
}

function init_repository_symlinks() {
	local success
	local repo
	success=true
	repo="$1"

	if does_repository_exist "$repo"; then
		# create symlink for 'today'
		local today_dir
		local today
		today="$d"
		today_dir="$repo/$y/d${today}"
		if $verbose; then echo -n "Creating symlink for 'today' pointing to '$today_dir'... "; fi
		if $dry_run || ln -f -n -s "$today_dir" "$repo/today"; then
			if $verbose; then echo 'Done.'; fi
		else
			if $verbose; then echo 'ERROR!'; fi
			notify "$repo" "ERROR" "An unknown error occurred while attempting to create the 'today' symlink pointing at the '${today_dir}' directory!"
			success=false
		fi

		# create symlink for 'yesterday'
		local yesterday_dir
		local yesterday
		local yesterday_year
		yesterday=$(reldate -1d +%d)
		yesterday_year=$(reldate -1d +%Y)
		yesterday_dir="$repo/${yesterday_year}/d${yesterday}"
		if $verbose; then echo -n "Creating symlink for 'yesterday' pointing to '$yesterday_dir'... "; fi
		if $dry_run || ln -f -n -s "$yesterday_dir" "$repo/yesterday"; then
			if $verbose; then echo 'Done.'; fi
		else
			if $verbose; then echo 'ERROR!'; fi
			notify "$repo" "ERROR" "An unknown error occurred while attempting to create the 'yesterday' symlink pointing at the '${yesterday_dir}' directory!"
			success=false
		fi

		# create symlink for 'sunday' through 'saturday' for the past week (not including today)
		local weekday_dir
		local weekday_name
		local weekday
		local weekday_year
		for (( i=1; i<=7; i++ )); do
			weekday=$(reldate -${i}d +%d)
			weekday_year=$(reldate -${i}d +%Y)
			weekday_dir="$repo/${weekday_year}/d${weekday}"
			weekday_name=$(reldate -${i}d +%A | tr '[:upper:]' '[:lower:]')
			if $verbose; then echo -n "Creating symlink for '$weekday_name' pointing to '$weekday_dir'... "; fi
			if $dry_run || ln -f -n -s "$weekday_dir" "$repo/$weekday_name"; then
				if $verbose; then echo 'Done.'; fi
			else
				if $verbose; then echo 'ERROR!'; fi
				notify "$repo" "ERROR" "An unknown error occurred while attempting to create the '${weekday_name}' symlink pointing at the '${weekday_dir}' directory!"
				success=false
			fi
		done
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi

	$success
}

function roll_repository_daily_to_monthly() {
	local success=true
	local repo="$1"
	local year="$2"
	local day="$3"
	local month="$4"
	local mtime_today="$5"	# also include files modified today? "true"/"false"

	if ! valid_year "$year" || ! valid_day "$day" || ! valid_month "$month"; then
		return 1
	fi

	if does_repository_exist "$repo"; then
		local src
		local dst
		local mtime=''
		printf -v src "%s/%d/d%02d" "$repo" "$year" "$(( 10#$day ))"
		printf -v dst "%s/%d/m%02d" "$repo" "$year" "$(( 10#$month ))"
		if $verbose; then echo -n $'\n'"    Moving files & directories from '$src' to '$dst' ("; fi
		if $mtime_today; then
			if $verbose; then echo -n "including"; fi
		else
			if $verbose; then echo -n "excluding"; fi
			mtime='-mtime +0'
		fi
		if $verbose; then echo -n " those modified today)... "; fi

		# step through all the matching (i.e. with or without a modification date of today) in the src dir and move them to dst
		while IFS= read -r line; do
			# don't bother processing an empty line or is the src directory itself
			if [ -n "$line" ]; then
				if $verbose; then echo -n $'\n'"      '$line'... "; fi
				if $dry_run || mv "$line" "$dst/"; then
					if $verbose; then echo "Done."; fi
				else
				    if $verbose; then echo "ERROR!"; fi
				    notify "$repo" "ERROR" "An unknown error occurred while attempting to move the '${line}' file/directory into the '${dst}' directory!"
				    success=false
				fi
			fi
		done <<< "$(find "$src" -mindepth 1 -maxdepth 1 $mtime| sort)"

		if $verbose; then echo "Done."; fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi

	$success
}

function roll_repository_monthly_to_monthly() {
	local success=true
	local repo="$1"
	local year="$2"
	local src_month="$3"
	local dst_month="$4"

	if does_repository_exist "$repo"; then
		local src
		local dst
		printf -v src "%s/%d/m%02d" "$repo" "$year" "$src_month"
		printf -v dst "%s/%d/m%02d" "$repo" "$year" "$dst_month"
		if $verbose; then echo -n $'\n'"    Moving files & directories from '$src' to '$dst'... "; fi

		# step through all the files in the src dir and move them to dst
		while IFS= read -r line; do
			# don't bother processing an empty line
			if [ -n "$line" ]; then
				if $verbose; then echo -n $'\n'"      '$line'... "; fi
				if $dry_run || mv "$line" "$dst/"; then
					if $verbose; then echo "Done."; fi
				else
					if $verbose; then echo "ERROR!"; fi
					notify "$repo" "ERROR" "An unknown error occurred while attempting to move the '${line}' file/directory into the '${dst}' directory!"
					success=false
				fi
			fi
		done <<< "$(find "$src" -mindepth 1 -maxdepth 1 | sort)"

		if $verbose; then echo "Done."; fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi

	$success
}

function consolidate_repository_monthly() {
	local success=true
	local repo="$1"
	local year="$2"
	local month="$3"

	if does_repository_exist "$repo"; then
		local dir
		printf -v dir "%s/%d/m%02d" "$repo" "$year" "$(( 10#$month ))"
		local last_file=''

		# step through all the files and directories and look for any with the same name except for a datestamp
		while IFS= read -r line; do
			# don't bother processing an empty line
			if [[ ( -n "$line" ) && ( "$line" != "$dir" ) ]]; then
				# if we don't have another file to compare against, we can't do anything
				if [ -n "$last_file" ]; then
					if $verbose; then echo -n $'\n'"  Comparing '$last_file' with '$line'... "; fi
					compare_date_stamped_filenames "$last_file" "$line"
					local match=$?
					# don't do anthing if the filenames don't match
					if [ $match -eq 0 ]; then
						if $verbose; then echo "NO MATCH!"; fi
					# if the first file has a newer date stamp, then keep it and remove the second
					elif [ $match -eq 1 ]; then
						if $verbose; then echo -n "Keeping the former... "; fi
						if $dry_run || rm -r "$line"; then
							if $verbose; then echo "Done."; fi
						else
						    if $verbose; then echo "ERROR!"; fi
						    notify "$repo" "ERROR" "An unknown error occurred while attempting to delete the '${line}' file/directory during consolidation of files in the '${dir}' directory!"
						    success=false
						fi
					# if the second file has a newer date stamp, then keep it and remove the first
					elif [ $match -eq 2 ]; then
						if $verbose; then echo -n "Keeping the latter... "; fi
						if $dry_run || rm -r "$last_file"; then
							if $verbose; then echo "Done."; fi
						else
						    if $verbose; then echo "ERROR!"; fi
						    notify "$repo" "ERROR" "An unknown error occurred while attempting to delete the '${last_file}' file/directory during consolidation of files in the '${dir}' directory!"
						    success=false
						fi
					fi

					if $verbose; then echo -n "    Done."$'\n'"  "; fi
				fi

				# store this filename to compare with the next one
				last_file="$line"
			fi
		done <<< "$(find "$dir" -mindepth 1 -maxdepth 1 | sort)"
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi

	$success
}

function purge_year_directories() {
	local success=true
	local repo="$1"

	if does_repository_exist "$repo"; then
		if $verbose; then echo; fi
		# calculate keep-through year
		local keep_through=$(reldate -$(( ${config_keep_years} - 1 ))y +%Y)

		# step through all the year directories that exist and delete any that are older than our "keep through" year
		while IFS= read -r line; do
			local year="$(basename "$line")"
			if [[ "$year" =~ ^[0-9]{4}$ ]] && (( $year < $keep_through )); then
				if $verbose; then echo -n "  Deleting $year directory... "; fi
				if $dry_run || rm -r "${repo}/${year}"; then
					if $verbose; then echo "Done."; fi
				else
					if $verbose; then echo "ERROR!"; fi
					notify "$repo" "ERROR" "An unknown error occurred while attempting to delete the '${repo}/${year}' year directory while purging old annual directories!"
					success=false
				fi
			else
				if $verbose; then echo "  Preserving $year directory."; fi
			fi
		done <<< "$(Efind "$repo" '.*/[0-9]{4}' -mindepth 1 -maxdepth 1 | sort -nr)"
		if $verbose; then echo -n "  "; fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi

	$success
}

function roll_repository_directories() {
	local success=true
	local repo="$1"

	if does_repository_exist "$repo"; then
		# calculate today & keep-through dates
		local today="$d"
		local keep_through="$(reldate -$(( $config_keep_days - 1 ))d +%d)"
		if $verbose; then echo "Keeping files through 'd${keep_through}'."; fi

		# step through the day subdirectories and "process" those that are outside the range to preserve (starting with yesterday)
		local year=$(reldate -1d +%Y)
		local month=$(reldate -1d +%m)
		local day=$(reldate -1d +%d)
		local day_dir=''
		local month_dir=''
		while (( 10#$day != 10#$today )); do
			# build the directory paths
			printf -v day_dir "%s/%d/d%02d" "$repo" "$year" "$(( 10#$day ))"
			printf -v month_dir "%s/%d/m%02d" "$repo" "$year" "$(( 10#$month ))"

			if $verbose; then echo -n "Processing directory '$day_dir'... "; fi
			# are we keeping a range that doesn't wrap (i.e. today is greater than the day through which we're keeping)?
			if (( ( 10#$today >= 10#$keep_through ) && ( 10#$day >= 10#$keep_through ) && ( 10#$day <= 10#$today ) )); then
				if $verbose; then echo 'Keeping.'; fi
			# or, are we keeping a range that wraps (i.e. the day through which we're keeping is greater than today)?
			elif (( ( 10#$today <= 10#$keep_through ) && ( ( 10#$day <= 10#$today ) || ( 10#$day >= 10#$keep_through ) ) )); then
				if $verbose; then echo 'Keeping.'; fi
			# only process if this is outside the range to keep
			else
				if $verbose; then echo -n $'\n''  Processing...'; fi

				# move the contents of the day's directory to the appropriate month's directory
				if roll_repository_daily_to_monthly "$repo" "$year" "$day" "$month" true; then
					if $verbose; then echo "  Done."; fi
				else
					echo 'ERROR!'
					echo "A fatal error occurred while attempting to move the contents of '$day_dir' to '$month_dir'!"
					echo 'Exiting.'
					notify "$repo" "ERROR" "A fatal error occurred while attempting to move the contents of '${day_dir}' to '${month_dir}'!"
					exit 1
				fi
			fi

			# decrement the day & wrap around day, month, and year if we've gone under
			day=$(( 10#$day - 1 ))
			if (( 10#$day < 1 )); then
				day=31
				month=$(( 10#$month - 1 ))
				if (( 10#$month < 1 )); then
					month=12
					(( year-- ))
				fi
			fi
		done

		# we always process today (but we have to be extra careful since there's the possibility new files have already been stashed in it)
		if (( ( $year == $y ) && ( 10#$month == 10#$m ) )); then
			month=$(( 10#$month - 1 ));
			if (( 10#$month < 1 )); then
				month=12
				(( year-- ))
			fi
		fi
		printf -v day_dir "%s/%d/d%02d" "$repo" "$year" "$(( 10#$day ))"
		printf -v month_dir "%s/%d/m%02d" "$repo" "$year" "$(( 10#$month ))"
		if $verbose; then echo -n "Processing directory '$day_dir'... "$'\n'"  Processing (special)... "; fi
		# move the contents of the day's directory to the appropriate month's directory
		if roll_repository_daily_to_monthly "$repo" "$year" "$day" "$month" false; then
			if $verbose; then echo "  Done."; fi
		else
			echo 'ERROR!'
			echo "A fatal error occurred while attempting to move the contents of '$day_dir' to '$month_dir'!"
			echo 'Exiting.'
			notify "$repo" "ERROR" "A fatal error occurred while attempting to move the contents of '$day_dir' to '$month_dir'!"
			exit 1
		fi

		# calculate month keep-through & year dates
		local keep_through_year="$(reldate -$((${config_keep_months} - 1))m +%Y)"
		local keep_through_month="$(reldate -$((${config_keep_months} - 1))m +%m)"

		# step through the month subdirectories and "process" those that are outside the range to preserve (starting with this month)
		local year=''
		local month=''
		while IFS= read -r year; do
			year="$(basename "$year")"

			# if we've passed our keep through year, always reset to december of the next earliest year
			if (( $year < $keep_through_year )); then
				keep_through_year="$year"
				keep_through_month=12
			fi

			for (( month=12; month > 0; month-- )); do
				# build the directory paths
				local month_dir
				local keep_month_dir
				printf -v month_dir "%s/%d/m%02d" "$repo" "$year" "$(( 10#$month ))"
				printf -v keep_month_dir "%s/%d/m%02d" "$repo" "$keep_through_year" "$(( 10#$keep_through_month ))"

				if $verbose; then echo -n "Processing directory '$month_dir'... "; fi
				# are we we in a month that should be kept?
				if (( ( $year > $keep_through_year ) || ( ( $year == $keep_through_year) && (10#$month >= 10#$keep_through_month) ) )); then
					if $verbose; then echo 'Keeping.'; fi
				# otherwise, if the month is in the keep through year, we should move it to the keep through month
				elif (( $year == $keep_through_year )); then
					if $verbose; then echo -n $'\n''  Processing...'; fi

					# move the contents of the month's directory to the appropriate keep_through month's directory
					if roll_repository_monthly_to_monthly "$repo" "$year" "$(( 10#$month ))" "$(( 10#$keep_through_month ))"; then
						if $verbose; then echo "  Done."; fi
					else
						echo 'ERROR!'
						echo "A fatal error occurred while attempting to move the contents of '$month_dir' to '$keep_month_dir'!"
						echo 'Exiting.'
						notify "$repo" "ERROR" "A fatal error occurred while attempting to move the contents of '$month_dir' to '$keep_month_dir'!"
						exit 1
					fi
				# if we've gone past the year to keep, then no need to continue
				else
					if $verbose; then echo 'Keeping.'; fi
					break;
				fi
			done
		done <<< "$(Efind "$repo" '.*/[0-9]{4}' -mindepth 1 -maxdepth 1 | sort -nr)"

		# consolidate files in the monthly directories
		if $success; then
			while IFS= read -r year; do
			year="$(basename "$year")"
				for (( month=12; month > 0; month-- )); do
					printf -v month_dir "%s/%d/m%02d" "$repo" "$year" "$(( 10#$month ))"
					if $verbose; then echo -n "Consolidating files & directories in '$month_dir'... "; fi
					if consolidate_repository_monthly "$repo" "$year" "$month"; then
						if $verbose; then echo "Done."; fi
					else
						if $verbose; then echo "ERROR!"; fi
						notify "$repo" "ERROR" "An error occurred while consolidating files & directories in '${month_dir}'!"
					fi
				done
			done <<< "$(Efind "$repo" '.*/[0-9]{4}' -mindepth 1 -maxdepth 1 | sort -nr)"
		fi

		# finally, delete any year directories older than we're supposed to keep
		if $success; then
			if $verbose; then echo -n "Purging annual directories in '${repo}'... "; fi
			if purge_year_directories "$repo"; then
				if $verbose; then echo "Done."; fi
			else
				if $verbose; then echo "ERROR!"; fi
				notify "$repo" "ERROR" "An error occurred while purging annual directories in '${repo}'!"
			fi
		fi
	else
		if $verbose; then echo "ERROR! Repository '${repo}' doesn't exist!"; fi
		notify "$repo" "ERROR" "The '${repo}' repository doesn't exist!"
		success=false
	fi

	$success
}
